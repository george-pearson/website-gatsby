{"version":3,"file":"component---src-templates-post-template-post-template-js-content-file-path-src-pages-posts-2019-05-19-sobel-index-mdx-1a17e4c8d9134e36e720.js","mappings":"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","sources":["webpack://blog/./static/flower.png","webpack://blog/./src/components/posts/sobel/sobelFlower/style.module.css","webpack://blog/./src/components/posts/sobel/sobel.js","webpack://blog/./src/components/posts/sobel/sobelFlower/sobelFlower.js","webpack://blog/./src/components/posts/sobel/sobelTool/sobelTool.js","webpack://blog/./src/components/posts/sobel/sobelTool/style.module.css","webpack://blog/./static/colourWheel.png","webpack://blog/./src/pages/posts/2019-05-19-sobel/style.module.css","webpack://blog/./src/pages/posts/2019-05-19-sobel/index.mdx","webpack://blog/./src/templates/postTemplate/postTemplate.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/flower-fcef3540a73d05d95337bb12ec39768e.png\";","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--4d7b9\";\nexport var controls = \"style-module--controls--e95b8\";\nexport var displayBlock = \"style-module--displayBlock--78c86\";\nexport var displayHidden = \"style-module--displayHidden--4d520\";","function sobel(canvas, saturation) {\r\n  const px = greyscale(canvas);\r\n  const vertical = convolute(px, [-1, -2, -1, 0, 0, 0, 1, 2, 1]);\r\n  const horizontal = convolute(px, [-1, 0, 1, -2, 0, 2, -1, 0, 1]);\r\n  const magnitude = new Float32Array(px.width * px.height * 4);\r\n  const orientation = new Float32Array(px.width * px.height * 4);\r\n  let maxMagnitude = -1;\r\n  for (let i = 0; i < px.data.length; i += 4) {\r\n    const dy = vertical.data[i];\r\n    const dx = horizontal.data[i];\r\n    magnitude[i] = Math.sqrt(dx * dx + dy * dy);\r\n    if (magnitude[i] > maxMagnitude) {\r\n      maxMagnitude = magnitude[i];\r\n    }\r\n    orientation[i] = Math.atan2(dy, dx) + Math.PI;\r\n  }\r\n  const ctx = canvas.getContext(\"2d\");\r\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  for (let j = 0; j < imageData.data.length; j += 4) {\r\n    const rgb = HSVtoRGB(\r\n      orientation[j] / (2 * Math.PI),\r\n      saturation,\r\n      magnitude[j] / maxMagnitude\r\n    );\r\n    imageData.data[j] = rgb.r;\r\n    imageData.data[j + 1] = rgb.g;\r\n    imageData.data[j + 2] = rgb.b;\r\n    imageData.data[j + 3] = 255;\r\n  }\r\n  return imageData;\r\n}\r\n\r\nfunction greyscale(canvas) {\r\n  const ctx = canvas.getContext(\"2d\");\r\n  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n  const d = imageData.data;\r\n  for (var i = 0; i < d.length; i += 4) {\r\n    const r = d[i];\r\n    const g = d[i + 1];\r\n    const b = d[i + 2];\r\n    const v = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n    d[i] = d[i + 1] = d[i + 2] = v;\r\n  }\r\n  return imageData;\r\n}\r\n\r\nfunction convolute(pixels, weights) {\r\n  const side = Math.round(Math.sqrt(weights.length));\r\n  const halfSide = Math.floor(side / 2);\r\n  const src = pixels.data;\r\n  const sw = pixels.width;\r\n  const sh = pixels.height;\r\n  const output = {\r\n    width: sw,\r\n    height: sh,\r\n    data: new Float32Array(sw * sh * 4),\r\n  };\r\n  const dst = output.data;\r\n\r\n  for (let y = 0; y < sh; y++) {\r\n    for (let x = 0; x < sw; x++) {\r\n      const sy = y;\r\n      const sx = x;\r\n      const dstOff = (y * sw + x) * 4;\r\n      let r = 0,\r\n        g = 0,\r\n        b = 0,\r\n        a = 0;\r\n      for (var cy = 0; cy < side; cy++) {\r\n        for (var cx = 0; cx < side; cx++) {\r\n          const scy = Math.min(sh - 1, Math.max(0, sy + cy - halfSide));\r\n          const scx = Math.min(sw - 1, Math.max(0, sx + cx - halfSide));\r\n          const srcOff = (scy * sw + scx) * 4;\r\n          const wt = weights[cy * side + cx];\r\n          r += src[srcOff] * wt;\r\n          g += src[srcOff + 1] * wt;\r\n          b += src[srcOff + 2] * wt;\r\n          a += src[srcOff + 3] * wt;\r\n        }\r\n      }\r\n      dst[dstOff] = r;\r\n      dst[dstOff + 1] = g;\r\n      dst[dstOff + 2] = b;\r\n      dst[dstOff + 3] = a;\r\n    }\r\n  }\r\n  return output;\r\n}\r\n\r\nfunction HSVtoRGB(h, s, v) {\r\n  let r, g, b, i, f, p, q, t;\r\n  if (arguments.length === 1) {\r\n    s = h.s;\r\n    v = h.v;\r\n    h = h.h;\r\n  }\r\n  i = Math.floor(h * 6);\r\n  f = h * 6 - i;\r\n  p = v * (1 - s);\r\n  q = v * (1 - f * s);\r\n  t = v * (1 - (1 - f) * s);\r\n  switch (i % 6) {\r\n    case 0:\r\n      r = v;\r\n      g = t;\r\n      b = p;\r\n      break;\r\n    case 1:\r\n      r = q;\r\n      g = v;\r\n      b = p;\r\n      break;\r\n    case 2:\r\n      r = p;\r\n      g = v;\r\n      b = t;\r\n      break;\r\n    case 3:\r\n      r = p;\r\n      g = q;\r\n      b = v;\r\n      break;\r\n    case 4:\r\n      r = t;\r\n      g = p;\r\n      b = v;\r\n      break;\r\n    case 5:\r\n      r = v;\r\n      g = p;\r\n      b = q;\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n  return {\r\n    r: Math.round(r * 255),\r\n    g: Math.round(g * 255),\r\n    b: Math.round(b * 255),\r\n  };\r\n}\r\n\r\nexport { sobel, greyscale };\r\n","import React, { useState, useRef } from \"react\";\r\nimport flower from \"../../../../../static/flower.png\";\r\nimport * as style from \"./style.module.css\";\r\nimport { sobel, greyscale } from \"../sobel.js\";\r\n\r\nconst SobelFlower = ({ transformType }) => {\r\n  const canvas = useRef();\r\n  const image = useRef();\r\n\r\n  const [defaultImageHidden, setDefaultImageHidden] = useState(false);\r\n  const [transformApplied, setTransformApplied] = useState(false);\r\n\r\n  const applyClickHandler = () => {\r\n    const ctx = canvas.current.getContext(\"2d\");\r\n    canvas.current.width = image.current.width;\r\n    canvas.current.height = image.current.height;\r\n    ctx.drawImage(image.current, 0, 0);\r\n    if (!transformApplied) {\r\n      const transformedImageData = applyTransform(canvas.current);\r\n      ctx.putImageData(transformedImageData, 0, 0);\r\n      setDefaultImageHidden(true);\r\n      setTransformApplied(true);\r\n    } else {\r\n      setTransformApplied(false);\r\n    }\r\n  };\r\n\r\n  const applyTransform = canvas => {\r\n    switch (transformType) {\r\n      case \"greyscale\":\r\n        return greyscale(canvas);\r\n      case \"sobel\":\r\n        return sobel(canvas, 0);\r\n      case \"sobelColour\":\r\n        return sobel(canvas, 1);\r\n      default:\r\n        const ctx = canvas.getContext(\"2d\");\r\n        return ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className={style.container}>\r\n        <canvas\r\n          ref={canvas}\r\n          className={\r\n            defaultImageHidden ? style.displayBlock : style.displayHidden\r\n          }\r\n        />\r\n        <img\r\n          ref={image}\r\n          className={\r\n            defaultImageHidden ? style.displayHidden : style.displayBlock\r\n          }\r\n          src={flower}\r\n          alt=\"flower\"\r\n        />\r\n      </div>\r\n      <div className={style.controls}>\r\n        <button onClick={applyClickHandler}>\r\n          {transformApplied ? \"Reload\" : \"Apply\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SobelFlower;","import React, { useState, useRef } from \"react\";\r\nimport * as style from \"./style.module.css\";\r\nimport { sobel } from \"../sobel.js\";\r\n\r\nconst SobelTool = () => {\r\n  const canvas = useRef();\r\n  const fileInput = useRef();\r\n  const image = useRef();\r\n  const maxImageSize = 600;\r\n\r\n  const [imageSelected, setImageSelected] = useState(false);\r\n  const [transformApplied, setTransformApplied] = useState(false);\r\n  const [saturation, setSaturation] = useState(1);\r\n\r\n  const selectImageChangeHandler = e => {\r\n    const reader = new FileReader();\r\n    reader.onload = event => {\r\n      image.current = new Image();\r\n      image.current.onload = () => {\r\n        drawImageToScale(image.current, maxImageSize, canvas.current);\r\n      };\r\n      image.current.src = event.target.result;\r\n    };\r\n    const file = e.target.files[0];\r\n    if (file && file.type.match(\"image.*\")) {\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const applyClickHandler = () => {\r\n    const ctx = canvas.current.getContext(\"2d\");\r\n    if (!transformApplied) {\r\n      const id = sobel(canvas.current, saturation);\r\n      ctx.putImageData(id, 0, 0);\r\n      setTransformApplied(true);\r\n    } else {\r\n      drawImageToScale(image.current, maxImageSize, canvas.current);\r\n      setTransformApplied(false);\r\n    }\r\n  };\r\n\r\n  const drawImageToScale = (image, maxSize, canvas) => {\r\n    let scale = 1;\r\n    if (maxSize < image.width || maxSize < image.height) {\r\n      scale = Math.min(maxSize / image.width, maxSize / image.height);\r\n    }\r\n    canvas.width = image.width * scale;\r\n    canvas.height = image.height * scale;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\r\n    setImageSelected(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvas} width=\"0\" height=\"0\" />\r\n      <button onClick={() => fileInput.current.click()}>Select an Image</button>\r\n      <input\r\n        accept=\"image/*\"\r\n        className={style.displayHidden}\r\n        type=\"file\"\r\n        ref={fileInput}\r\n        onChange={selectImageChangeHandler}\r\n      />\r\n      {imageSelected && (\r\n        <div>\r\n          <div className={style.saturation}>\r\n            <label htmlFor=\"saturation\">Saturation:</label>\r\n            <input\r\n              id=\"saturation\"\r\n              type=\"range\"\r\n              step=\"0.01\"\r\n              min=\"0\"\r\n              max=\"1\"\r\n              defaultValue={saturation}\r\n              onChange={e => setSaturation(e.target.value)}\r\n            />\r\n            <span>{saturation}</span>\r\n          </div>\r\n          <button onClick={applyClickHandler}>\r\n            {transformApplied ? \"Reload\" : \"Apply\"}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SobelTool;","// extracted by mini-css-extract-plugin\nexport var displayHidden = \"style-module--displayHidden--e4435\";\nexport var saturation = \"style-module--saturation--62163\";","export default __webpack_public_path__ + \"static/colourWheel-3966a58508ae3112e498a3fe25aba01e.png\";","// extracted by mini-css-extract-plugin\nexport var colourWheel = \"style-module--colourWheel--53b77\";","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport FlowerSobel from \"../../../components/posts/sobel/sobelFlower/sobelFlower\";\nimport SobelTool from \"../../../components/posts/sobel/sobelTool/sobelTool\";\nimport colourWheel from \"../../../../static/colourWheel.png\";\nimport * as style from \"./style.module.css\";\nimport * as commonStyle from \"../common.module.css\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"I recently watched a \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://youtu.be/uihBwtPIBxM\"\n  }, \"Computerphile YouTube video\"), \" about Sobel edge detection and thought I'd write a post about it. In Sobel edge detection a \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Sobel_operator\",\n    class: \"blueLink\"\n  }, \"Sobel operation\"), \" is applied to an image in order to detect shapes/edges in the image. The main application of edge detection is in robotic vision, for example allowing self-driving vehicles to detect motorway lanes, but it can be used for any image analysis.\"), \"\\n\", React.createElement(_components.p, null, \"The first step in the Sobel operation is to \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Grayscale\",\n    class: \"blueLink\"\n  }, \"greyscale\"), \" the image. This can be done with a few lines of JavaScript code:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"var gsFigure = document.querySelector(\\\"#fig-greyscale\\\");\\r\\nvar gsImage = gsFigure.querySelector(\\\"img\\\");\\r\\nvar gsCanvas = gsFigure.querySelector(\\\"canvas\\\");\\r\\nvar gsbutton = gsFigure.querySelector(\\\".button\\\");\\r\\nvar gsCtx = gsCanvas.getContext(\\\"2d\\\");\\r\\n\\r\\ngsbutton.addEventListener(\\\"click\\\", () => {\\r\\n  gsCanvas.width = gsImage.width;\\r\\n  gsCanvas.height = gsImage.height;\\r\\n  gsCtx.drawImage(gsImage, 0, 0);\\r\\n  var gsImageData = gsCtx.getImageData(0, 0, gsCanvas.width, gsCanvas.height);\\r\\n  var id = greyScale(gsImageData);\\r\\n  gsCtx.putImageData(id, 0, 0);\\r\\n}\\r\\n\\r\\nfunction greyScale (imageData) {\\r\\n  var d = imageData.data;\\r\\n  for (var i=0; i<d.length; i+=4) {\\r\\n    var r = d[i];\\r\\n    var g = d[i+1];\\r\\n    var b = d[i+2];\\r\\n    // CIE luminance for RGB\\r\\n    // Human vision is most sensitive to green, so this has the greatest coefficient value.\\r\\n    var v = 0.2126*r + 0.7152*g + 0.0722*b;\\r\\n    d[i] = d[i+1] = d[i+2] = v\\r\\n  }\\r\\n  return imageData;\\r\\n};\\n\")), \"\\n\", React.createElement(FlowerSobel, {\n    transformType: \"greyscale\"\n  }), \"\\n\", React.createElement(_components.p, null, \"The next step in the Sobel operation is to \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Kernel_(image_processing)#Convolution\"\n  }, \"convolve\"), \" the image with two 3x3 \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Kernel_(image_processing)\"\n  }, \"kernels\"), \", \", React.createElement(_components.code, null, \"Gx\"), \" and \", React.createElement(_components.code, null, \"Gy\"), \". What this basically means is the strength of each pixel is weighted by its neighbours. The magnitude of \", React.createElement(_components.code, null, \"Gx\"), \" is greatest when the pixels to the right and left of the pixel being convolved are most different, whereas the magnitude of \", React.createElement(_components.code, null, \"Gy\"), \" is greatest when the pixels above and below are most different. \", React.createElement(_components.code, null, \"Gx\"), \" and \", React.createElement(_components.code, null, \"Gy\"), \" can therefore be considered gradient functions and effectively emphasise edges in the x and y directions respectively.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"     |-1 0 +1|               |-1 -2 -1|\\r\\nGx = |-2 0 +2| * A  ,   Gy = | 0  0  0| * A  ,  where A is the source image.\\r\\n     |-1 0 +1|               |+1 +2 +1|\\n\")), \"\\n\", React.createElement(_components.p, null, \"The gradient functions can be combined to form a gradient magnitude \", React.createElement(_components.code, null, \"G = sqrt(Gx^2 + Gy^2)\"), \". This produces an image where all the areas with large changes in pixel intensity (edges) are highlighted, just hit the button below to see an example:\"), \"\\n\", React.createElement(FlowerSobel, {\n    transformType: \"sobel\"\n  }), \"\\n\", React.createElement(\"img\", {\n    className: style.colourWheel,\n    src: colourWheel,\n    alt: \"colour wheel\"\n  }), \"\\n\", React.createElement(_components.p, null, \"In fact we can even find out the orientation of the edges by taking the arctan of the gradient functions, \", React.createElement(_components.code, null, \"θ = atan(Gy/Gx)\"), \". The orientation can then be mapped to a colour using a colour wheel. Try running the example Sobel operation below:\"), \"\\n\", React.createElement(FlowerSobel, {\n    transformType: \"sobelColour\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Wow that's pretty fancy! Notice how the edges orientation maps to that of the colour wheel.\"), \"\\n\", React.createElement(_components.p, null, \"Finally have a play with the JavaScript tool below allowing you to create your own Sobel images. The saturation input controls the amount of orientational colour added. Also I've set it to scale the images to 600px for performance.\"), \"\\n\", React.createElement(SobelTool), \"\\n\", React.createElement(_components.h2, null, \"Further reading / watching\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://youtu.be/uihBwtPIBxM\"\n  }, \"Finding the Edges (Sobel Operator) - Computerphile\"), \"\\n\"), \"\\n\", React.createElement(_components.li, null, \"\\n\", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://www.html5rocks.com/en/tutorials/canvas/imagefilters/\"\n  }, \"Image Filters with Canvas\"), \"\\n\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/src/gatsby/src/pages/posts/2019-05-19-sobel/index.mdx\";\nimport React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport PostHeader from \"../../components/postHeader/postHeader\";\nimport CodeBlock from \"../../components/codeBlock/codeBlock\";\nimport InlineCode from \"../../components/inlineCode/inlineCode\";\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport * as style from \"./style.module.css\";\nconst PostTemplate = ({data: {mdx}, children}) => {\n  const components = {\n    code: CodeBlock,\n    inlineCode: InlineCode\n  };\n  const post = mdx;\n  return React.createElement(Layout, {\n    page: \"Post\",\n    post: post\n  }, React.createElement(\"div\", {\n    className: style.postContainer\n  }, React.createElement(\"div\", {\n    className: style.post\n  }, React.createElement(PostHeader, {\n    post: post\n  }), React.createElement(MDXProvider, {\n    components: components\n  }, children))));\n};\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        subtitle\n        image\n      }\n    }\n  }\n`;\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["displayBlock","displayHidden","sobel","canvas","saturation","px","greyscale","vertical","convolute","horizontal","magnitude","Float32Array","width","height","orientation","maxMagnitude","i","data","length","dy","dx","Math","sqrt","atan2","PI","imageData","getContext","getImageData","j","rgb","HSVtoRGB","r","g","b","d","v","pixels","weights","side","round","halfSide","floor","src","sw","sh","output","dst","y","x","sy","sx","dstOff","a","cy","cx","srcOff","min","max","wt","h","s","f","p","q","t","arguments","_ref","transformType","useRef","image","defaultImageHidden","setDefaultImageHidden","useState","transformApplied","setTransformApplied","applyTransform","React","className","ref","style","flower","alt","onClick","applyClickHandler","ctx","current","drawImage","transformedImageData","putImageData","SobelTool","fileInput","imageSelected","setImageSelected","setSaturation","drawImageToScale","maxSize","scale","click","accept","type","onChange","e","reader","FileReader","onload","event","Image","target","result","file","files","match","readAsDataURL","htmlFor","id","step","defaultValue","value","_createMdxContent","props","_components","Object","assign","pre","code","h2","ul","li","_provideComponents","components","class","href","FlowerSobel","colourWheel","wrapper","MDXLayout","PostTemplate","mdx","children","CodeBlock","inlineCode","InlineCode","post","Layout","page","PostHeader","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}