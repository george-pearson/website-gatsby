{"version":3,"file":"component---src-pages-posts-2019-02-20-dsa-cloud-images-index-mdx-997f2d46a8cadae02817.js","mappings":"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","sources":["webpack://blog/./static/cloudImage.jpg","webpack://blog/./src/components/posts/dsaTool/style.module.css","webpack://blog/./src/components/posts/dsaTool/dsaTool.js","webpack://blog/./src/pages/posts/2019-02-20-dsa-cloud-images/index.mdx","webpack://blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/cloudImage-87f1914e207807a93c4e80ec41197865.jpg\";","// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--889be\";\nexport var controls = \"style-module--controls--02552\";\nexport var displayBlock = \"style-module--displayBlock--24073\";\nexport var displayHidden = \"style-module--displayHidden--bb185\";\nexport var inputControl = \"style-module--inputControl--78869\";","import React, { useState, useRef } from \"react\";\r\nimport cloudImage from \"../../../../static/cloudImage.jpg\";\r\nimport * as style from \"./style.module.css\";\r\n\r\nconst DSATool = () => {\r\n  const canvas = useRef();\r\n  const [color1, setColor1] = useState(\"#3c69ff\");\r\n  const [color2, setColor2] = useState(\"#ffffff\");\r\n  const [defaultImageHidden, setDefaultImageHidden] = useState(false);\r\n  const n = 9;\r\n  const N = Math.pow(2, n) + 1;\r\n\r\n  const reloadClickHandler = event => {\r\n    const arr = runDSA(N);\r\n    printToCanvas(arr, canvas, color1, color2);\r\n    setDefaultImageHidden(true);\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <div className={style.container}>\r\n      <canvas\r\n        ref={canvas}\r\n        className={\r\n          defaultImageHidden ? style.displayBlock : style.displayHidden\r\n        }\r\n      />\r\n      <img\r\n        className={\r\n          defaultImageHidden ? style.displayHidden : style.displayBlock\r\n        }\r\n        src={cloudImage}\r\n        alt=\"cloud\"\r\n      />\r\n      <div className={style.controls}>\r\n        <input\r\n          className={style.inputControl}\r\n          type=\"color\"\r\n          value={color1}\r\n          onChange={e => setColor1(e.target.value)}\r\n        />\r\n        <input\r\n          className={style.inputControl}\r\n          type=\"color\"\r\n          value={color2}\r\n          onChange={e => setColor2(e.target.value)}\r\n        />\r\n        <button onClick={reloadClickHandler}>Reload</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction runDSA(N) {\r\n  // Initialise the array with random numbers at its corners\r\n  const arr = create2Darray(N, N, 0);\r\n  arr[0][0] = 2 * Math.random() - 1;\r\n  arr[0][N - 1] = 2 * Math.random() - 1;\r\n  arr[N - 1][0] = 2 * Math.random() - 1;\r\n  arr[N - 1][N - 1] = 2 * Math.random() - 1;\r\n\r\n  let side = N - 1;\r\n  let nSq = 1; // Number of Squares.\r\n  let f = 1.0; // f scales the random numbers at each stage of the algorithm\r\n  while (side > 1) {\r\n    const sideo2 = Math.round(side / 2);\r\n    let xc, yc;\r\n    // Diamond step:\r\n    diamondStep(xc, yc, arr, nSq, side, sideo2, f);\r\n    //Square step:\r\n    squareStep(xc, yc, arr, nSq, side, sideo2, f, N);\r\n    side = sideo2;\r\n    nSq = nSq * 2;\r\n    f = f / 2;\r\n  }\r\n\r\n  // Scale range to 0 to +1 and cut off outliers.\r\n  for (let ix = 0; ix < N; ix++) {\r\n    for (let iy = 0; iy < N; iy++) {\r\n      arr[ix][iy] = (arr[ix][iy] + 1.0) / 2.0;\r\n      if (arr[ix][iy] < 0.0) {\r\n        arr[ix][iy] = 0;\r\n      }\r\n      if (arr[ix][iy] > 1.0) {\r\n        arr[ix][iy] = 1.0;\r\n      }\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\nfunction diamondStep(xc, yc, arr, nSq, side, sideo2, f) {\r\n  for (let ix = 0; ix < nSq; ix++) {\r\n    for (let iy = 0; iy < nSq; iy++) {\r\n      const x0 = ix * side;\r\n      const x1 = (ix + 1) * side;\r\n      const y0 = iy * side;\r\n      const y1 = (iy + 1) * side;\r\n      xc = x0 + sideo2;\r\n      yc = y0 + sideo2;\r\n      // Set this pixel to the mean of its \"diamond\" neighbours plus\r\n      // a random offset.\r\n      arr[xc][yc] = (arr[y0][x0] + arr[y0][x1] + arr[y1][x0] + arr[y1][x1]) / 4;\r\n      arr[xc][yc] += f * (2 * Math.random() - 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction squareStep(xc, yc, arr, nSq, side, sideo2, f, N) {\r\n  const diff = [[-1, 0], [1, 0], [0, -1], [0, 1]];\r\n  for (let ix = 0; ix < 2 * nSq + 1; ix++) {\r\n    xc = sideo2 * ix;\r\n    for (let iy = 0; iy < 2 * nSq + 1; iy++) {\r\n      yc = side * iy + sideo2 * (1 - (ix % 2));\r\n      if (!(xc < N && xc > 0 && yc < N && yc > 0)) {\r\n        continue;\r\n      }\r\n      let tot = 0.0;\r\n      let ntot = 0;\r\n      // Set this pixel to the mean of its \"square\" neighbours plus\r\n      // a random offset. At the edges, it has only three neighbours.\r\n      for (let ii = 0; ii < diff.length; ii++) {\r\n        const dx = diff[ii][0];\r\n        const dy = diff[ii][1];\r\n        const xs = xc + dx * sideo2;\r\n        const ys = yc + dy * sideo2;\r\n        if (!(xs < N && xs > 0 && ys < N && ys > 0)) {\r\n          continue;\r\n        } else {\r\n          tot += arr[xs][ys];\r\n          ntot += 1;\r\n        }\r\n      }\r\n      arr[xc][yc] += tot / ntot + f * (2 * Math.random() - 1);\r\n    }\r\n  }\r\n}\r\n\r\n// Creates a 2D array, initialised to value\r\nfunction create2Darray(w, h, value) {\r\n  const arr = [];\r\n  for (let x = 0; x < w; x++) {\r\n    arr[x] = [];\r\n  }\r\n  for (let x = 0; x < w; x++) {\r\n    for (let y = 0; y < h; y++) {\r\n      arr[x][y] = value;\r\n    }\r\n  }\r\n  return arr;\r\n}\r\n\r\n//Print array to screen:\r\nfunction printToCanvas(arr, canvas, color1, color2) {\r\n  canvas.current.width = arr.length;\r\n  canvas.current.height = arr.length;\r\n  const ctx = canvas.current.getContext(\"2d\");\r\n\r\n  const myImageData = ctx.getImageData(0, 0, arr.length, arr.length);\r\n  const rgb = hexToRgb(color1);\r\n  for (let x = 0; x < arr.length; x++) {\r\n    for (let y = 0; y < arr.length; y++) {\r\n      const index = (x + y * arr.length) * 4;\r\n      myImageData.data[index + 0] = rgb.r * arr[x][y]; //r\r\n      myImageData.data[index + 1] = rgb.g * arr[x][y]; // g\r\n      myImageData.data[index + 2] = rgb.b * arr[x][y]; //b\r\n      myImageData.data[index + 3] = 255 * arr[x][y]; //a\r\n    }\r\n  }\r\n\r\n  ctx.fillStyle = color2;\r\n  ctx.fillRect(0, 0, canvas.current.width, canvas.current.height);\r\n  ctx.globalCompositeOperation = \"source-atop\";\r\n  createImageBitmap(myImageData).then(function(imgBitmap) {\r\n    ctx.drawImage(imgBitmap, 0, 0);\r\n  });\r\n}\r\n\r\nfunction hexToRgb(hex) {\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result\r\n    ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16),\r\n      }\r\n    : null;\r\n}\r\n\r\nexport default DSATool;","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport DSATool from \"../../../components/posts/dsaTool/dsaTool\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ol: \"ol\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"The \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Diamond-square_algorithm\",\n    class: \"blueLink\"\n  }, \"Diamond-square algorithm (DSA)\"), \" is a popular method used to generate realistic \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Heightmap\",\n    class: \"blueLink\"\n  }, \"heightmaps\"), \" which resemble clouds, terrain and/or plasma. The JavaScript code below can be used to generate square cloud images of size \", React.createElement(_components.code, null, \"N = 2^(n+1)\"), \". The images make great unique backgrounds (I have one on my phone!) and look rather pretty in my opinion.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"var n = 9;\\r\\nvar N = Math.pow(2, n) + 1;\\r\\nvar arr;\\r\\n\\r\\nfunction runDSA(N) {\\r\\n  // Initialise the array with random numbers at its corners\\r\\n  arr = create2Darray(N, N);\\r\\n  arr[0][0] = 2 * Math.random() - 1;\\r\\n  arr[0][N - 1] = 2 * Math.random() - 1;\\r\\n  arr[N - 1][0] = 2 * Math.random() - 1;\\r\\n  arr[N - 1][N - 1] = 2 * Math.random() - 1;\\r\\n\\r\\n  var side = N - 1;\\r\\n  var nSq = 1; // Number of Squares.\\r\\n  var f = 1.0; // f scales the random numbers at each stage of the algorithm\\r\\n  while (side > 1) {\\r\\n    var sideo2 = Math.round(side / 2);\\r\\n    var x0, x1, y0, y1, xc, yc, tot, ntot, dx, dy, xs, ys;\\r\\n    var diff = [[-1, 0], [1, 0], [0, -1], [0, 1]];\\r\\n    // Diamond step:\\r\\n    for (var ix = 0; ix < nSq; ix++) {\\r\\n      for (var iy = 0; iy < nSq; iy++) {\\r\\n        x0 = ix * side;\\r\\n        x1 = (ix + 1) * side;\\r\\n        y0 = iy * side;\\r\\n        y1 = (iy + 1) * side;\\r\\n        xc = x0 + sideo2;\\r\\n        yc = y0 + sideo2;\\r\\n        // Set this pixel to the mean of its \\\"diamond\\\" neighbours plus\\r\\n        // a random offset.\\r\\n        arr[xc][yc] =\\r\\n          (arr[y0][x0] + arr[y0][x1] + arr[y1][x0] + arr[y1][x1]) / 4;\\r\\n        arr[xc][yc] += f * (2 * Math.random() - 1);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    //Square step:\\r\\n    for (var ix = 0; ix < 2 * nSq + 1; ix++) {\\r\\n      xc = sideo2 * ix;\\r\\n      for (var iy = 0; iy < 2 * nSq + 1; iy++) {\\r\\n        yc = side * iy + sideo2 * (1 - (ix % 2));\\r\\n        if (!(xc < N && xc > 0 && yc < N && yc > 0)) {\\r\\n          continue;\\r\\n        }\\r\\n        tot = 0.0;\\r\\n        ntot = 0;\\r\\n        // Set this pixel to the mean of its \\\"square\\\" neighbours plus\\r\\n        // a random offset. At the edges, it has only three neighbours.\\r\\n        for (var ii = 0; ii < diff.length; ii++) {\\r\\n          dx = diff[ii][0];\\r\\n          dy = diff[ii][1];\\r\\n          xs = xc + dx * sideo2;\\r\\n          ys = yc + dy * sideo2;\\r\\n          if (!(xs < N && xs > 0 && ys < N && ys > 0)) {\\r\\n            continue;\\r\\n          } else {\\r\\n            tot += arr[xs][ys];\\r\\n            ntot += 1;\\r\\n          }\\r\\n        }\\r\\n        arr[xc][yc] += tot / ntot + f * (2 * Math.random() - 1);\\r\\n      }\\r\\n    }\\r\\n    side = sideo2;\\r\\n    nSq = nSq * 2;\\r\\n    f = f / 2;\\r\\n  }\\r\\n  return arr;\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"I've packaged the DSA code up into a easy to use tool with colour selectors below. This code:\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Runs the DSA, for \", React.createElement(_components.code, null, \"n = 9\"), \".\"), \"\\n\", React.createElement(_components.li, null, \"Scales the range from \", React.createElement(_components.code, null, \"[-1, +1]\"), \" to \", React.createElement(_components.code, null, \"[0, +1]\"), \".\"), \"\\n\", React.createElement(_components.li, null, \"Creates a hidden \", React.createElement(\"a\", {\n    href: \"https://www.w3schools.com/graphics/canvas_intro.asp\",\n    class: \"blueLink\"\n  }, \"Canvas\"), \" of size \", React.createElement(_components.code, null, \"N = 2^(n+1)\"), \".\"), \"\\n\", React.createElement(_components.li, null, \"Adds pixels to the Canvas with \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/RGBA_color_space\",\n    class: \"blueLink\"\n  }, \"RGBA\"), \" values scaled by the DSA output.\"), \"\\n\", React.createElement(_components.li, null, \"Converts the canvas to an image and displays it on the screen.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"Just hit \\\"Reload\\\" below and you'll have your very own cloud image!\"), \"\\n\", React.createElement(DSATool), \"\\n\", React.createElement(_components.p, null, \"The full code for this is available on my \", React.createElement(\"a\", {\n    href: \"https://github.com/george-pearson\",\n    class: \"blueLink\"\n  }, \"GitHub\"), \". If you want a bigger image just increase \", React.createElement(_components.code, null, \"n\"), \". Please bear in mind I've found \", React.createElement(_components.code, null, \"n > 11\"), \" tends to give my laptop a hard time and I haven't tested this on mobile so be careful (wouldn't want your browser to crash!).\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["displayBlock","displayHidden","inputControl","diamondStep","xc","yc","arr","nSq","side","sideo2","f","ix","iy","x0","x1","y0","y1","Math","random","squareStep","N","diff","tot","ntot","ii","length","xs","ys","DSATool","canvas","useRef","color1","setColor1","useState","color2","setColor2","defaultImageHidden","setDefaultImageHidden","pow","React","className","ref","style","src","cloudImage","alt","type","value","onChange","e","target","onClick","event","w","h","x","y","create2Darray","round","runDSA","current","width","height","ctx","getContext","myImageData","getImageData","rgb","hex","result","exec","r","parseInt","g","b","hexToRgb","index","data","fillStyle","fillRect","globalCompositeOperation","createImageBitmap","then","imgBitmap","drawImage","printToCanvas","preventDefault","_createMdxContent","props","_components","Object","assign","p","code","pre","ol","li","_provideComponents","components","href","class","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider"],"sourceRoot":""}