{"version":3,"file":"component---src-pages-posts-2019-07-23-putting-svgs-on-the-map-index-mdx-1725c181effa9d506341.js","mappings":"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","sources":["webpack://blog/./static/UKAndIreland.png","webpack://blog/./static/UKAndIrelandCircles.png","webpack://blog/./src/components/posts/circlesMapTool/style.module.css","webpack://blog/./static/UKAndIrelandSmall.png","webpack://blog/./src/components/posts/circlesMapTool/circlesMapTool.js","webpack://blog/./src/pages/posts/2019-07-23-putting-svgs-on-the-map/index.mdx","webpack://blog/./node_modules/@mdx-js/react/lib/index.js"],"sourcesContent":["export default __webpack_public_path__ + \"static/UKAndIreland-10e38dab76cd45c144a37fbb0b69f0d2.png\";","export default __webpack_public_path__ + \"static/UKAndIrelandCircles-0a478804265f2e7929d77e46199e55b3.png\";","// extracted by mini-css-extract-plugin\nexport var control = \"style-module--control--c9f77\";\nexport var controlGroup = \"style-module--controlGroup--c7ad7\";\nexport var displayBlock = \"style-module--displayBlock--1794c\";\nexport var displayNone = \"style-module--displayNone--a3c0a\";","export default __webpack_public_path__ + \"static/UKAndIrelandSmall-845f40a322bb455e59b94e66f49f65e0.png\";","import React, { useRef, useState } from \"react\";\r\nimport ReactDOMServer from \"react-dom/server\";\r\nimport * as style from \"./style.module.css\";\r\nimport UKAndIrelandSmall from \"../../../../static/UKAndIrelandSmall.png\";\r\n\r\nconst CirclesMapTool = () => {\r\n  const n = 800; // n is the maximum number of circles\r\n  const canvas = useRef();\r\n  const image = useRef();\r\n  const [colour1, setColour1] = useState(\"#993300\");\r\n  const [colour2, setColour2] = useState(\"#a5c916\");\r\n  const [colour3, setColour3] = useState(\"#00AA66\");\r\n  const [colour4, setColour4] = useState(\"#FF9900\");\r\n  const [rmin, setRmin] = useState(2);\r\n  const [rmax, setRmax] = useState(8);\r\n  const [defaultImageHidden, setDefaultImageHidden] = useState(false);\r\n\r\n  function reloadClickHandler() {\r\n    const LX = Math.round(image.current.naturalWidth);\r\n    const LY = Math.round(image.current.naturalHeight);\r\n    const inMemoryCanvas = document.createElement('canvas');\r\n    inMemoryCanvas.width = LX;\r\n    inMemoryCanvas.height = LY;\r\n    const inMemoryCtx = inMemoryCanvas.getContext(\"2d\");\r\n    inMemoryCtx.drawImage(image.current, 0, 0, LX, LY);\r\n    const imageData = inMemoryCtx.getImageData(0, 0, LX, LY).data;\r\n    const circleColours = [colour1, colour2, colour3, colour4];\r\n    const circles = makeCircles(\r\n      imageData,\r\n      circleColours,\r\n      rmin,\r\n      rmax,\r\n      n,\r\n      LX,\r\n      LY\r\n    );\r\n    const svg = createReactSVG(circles, LX, LY);\r\n    const svgString = ReactDOMServer.renderToString(svg);\r\n    const blob = new Blob([svgString], { type: \"image/svg+xml\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const img = new Image();\r\n    img.onload = () => {\r\n      canvas.current.width = LX;\r\n      canvas.current.height = LY;\r\n      const ctx = canvas.current.getContext(\"2d\");\r\n      ctx.drawImage(img, 0, 0);\r\n      URL.revokeObjectURL(url);\r\n      setDefaultImageHidden(true);\r\n    };\r\n    img.src = url;\r\n  }\r\n\r\n  function colour1ChangeHandler(e) {\r\n    setColour1(e.target.value);\r\n  }\r\n\r\n  function colour2ChangeHandler(e) {\r\n    setColour2(e.target.value);\r\n  }\r\n\r\n  function colour3ChangeHandler(e) {\r\n    setColour3(e.target.value);\r\n  }\r\n\r\n  function colour4ChangeHandler(e) {\r\n    setColour4(e.target.value);\r\n  }\r\n\r\n  function rminChangeHandler(e) {\r\n    setRmin(parseFloat(e.target.value));\r\n  }\r\n\r\n  function rmaxChangeHandler(e) {\r\n    setRmax(parseFloat(e.target.value));\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <img\r\n        className={defaultImageHidden ? style.displayNone : style.displayBlock}\r\n        ref={image}\r\n        src={UKAndIrelandSmall}\r\n        alt=\"UK and Ireland\"\r\n      />\r\n      <canvas\r\n        className={defaultImageHidden ? style.displayBlock : style.displayNone}\r\n        ref={canvas}\r\n      />\r\n      <div>\r\n        <div className={style.controlGroup}>\r\n          <input\r\n            className={style.control}\r\n            type=\"color\"\r\n            value={colour1}\r\n            onChange={colour1ChangeHandler}\r\n          />\r\n          <input\r\n            className={style.control}\r\n            type=\"color\"\r\n            value={colour2}\r\n            onChange={colour2ChangeHandler}\r\n          />\r\n          <input\r\n            className={style.control}\r\n            type=\"color\"\r\n            value={colour3}\r\n            onChange={colour3ChangeHandler}\r\n          />\r\n          <input\r\n            className={style.control}\r\n            type=\"color\"\r\n            value={colour4}\r\n            onChange={colour4ChangeHandler}\r\n          />\r\n        </div>\r\n        <div className={style.controlGroup}>\r\n          <label htmlFor=\"minRadius\">Min radius:</label>\r\n          <input\r\n            id=\"minRadius\"\r\n            className={style.control}\r\n            type=\"range\"\r\n            step=\"0.25\"\r\n            min=\"2\"\r\n            max=\"5\"\r\n            value={rmin}\r\n            onChange={rminChangeHandler}\r\n          />\r\n          <span className={style.control}>{rmin}</span>\r\n        </div>\r\n        <div className={style.controlGroup}>\r\n          <label htmlFor=\"maxRadius\">Max radius:</label>\r\n          <input\r\n            id=\"maxRadius\"\r\n            className={style.control}\r\n            type=\"range\"\r\n            step=\"0.25\"\r\n            min=\"5\"\r\n            max=\"8\"\r\n            value={rmax}\r\n            onChange={rmaxChangeHandler}\r\n          />\r\n          <span className={style.control}>{rmax}</span>\r\n        </div>\r\n        <button onClick={reloadClickHandler}>Run</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction createReactSVG(circles, LX, LY) {\r\n  const svgNamespace = \"http://www.w3.org/2000/svg\";\r\n  const circleElements = circles.map(circle => {\r\n    return React.createElement(\"circle\", {\r\n      xmlns: svgNamespace,\r\n      cx: circle.cx,\r\n      cy: circle.cy,\r\n      r: circle.r,\r\n      fill: circle.colour,\r\n    });\r\n  });\r\n  return React.createElement(\r\n    \"svg\",\r\n    {\r\n      xmlns: svgNamespace,\r\n      width: LX,\r\n      height: LY,\r\n    },\r\n    ...circleElements\r\n  );\r\n}\r\n\r\nfunction makeCircles(imageData, circleColours, rmin, rmax, n, LX, LY) {\r\n  const circles = [];\r\n  const radii = [];\r\n  // First choose a set of n random radii and sort them. We use\r\n  // Math.random()*Math.random() to favour small circles.\r\n  for (let i = 0; i < n; i++) {\r\n    const radius = rmin + (rmax - rmin) * (Math.random() * Math.random());\r\n    radii.push(radius);\r\n  }\r\n  radii.sort().reverse();\r\n  // Do our best to place the circles, larger ones first.\r\n  for (let i = 0; i < n; i++) {\r\n    placeCircle(circles, radii[i], imageData, circleColours, LX, LY);\r\n  }\r\n  return circles;\r\n}\r\n\r\nfunction placeCircle(circles, radius, imageData, circleColours, LX, LY) {\r\n  //The guard number: if we don't place a circle within this number of trials, we give up.\r\n  let guard = 500;\r\n  while (guard > 0) {\r\n    // Pick a random position on the image.\r\n    const cx = randomIntFromInterval(0, LX - 1);\r\n    const cy = randomIntFromInterval(0, LY - 1);\r\n    const index = (cx + cy * LX) * 4;\r\n    const red = imageData[index + 0];\r\n    const green = imageData[index + 1];\r\n    const blue = imageData[index + 2];\r\n    const average = (red + green + blue) / 3;\r\n    const overlaps = circles.some(existingCircle =>\r\n      overlapWith(\r\n        cx,\r\n        cy,\r\n        radius,\r\n        existingCircle.cx,\r\n        existingCircle.cy,\r\n        existingCircle.r\r\n      )\r\n    );\r\n    // The circle doesn't overlap with any other circles and its in the dark image area.\r\n    if (!overlaps && average < 255 / 2) {\r\n      const circle = {\r\n        cx: cx,\r\n        cy: cy,\r\n        r: radius,\r\n        colour: circleColours[randomIntFromInterval(0, 3)],\r\n      };\r\n      circles.push(circle);\r\n      return;\r\n    }\r\n    guard -= 1;\r\n  }\r\n  //console.log(\"Guard reached\");\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction overlapWith(cx1, cy1, r1, cx2, cy2, r2) {\r\n  const d = Math.sqrt((cx1 - cx2) * (cx1 - cx2) + (cy1 - cy2) * (cy1 - cy2));\r\n  return d < r1 + r2;\r\n}\r\n\r\nexport default CirclesMapTool;","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport UKAndIreland from \"../../../../static/UKAndIreland.png\";\nimport UKAndIrelandCircles from \"../../../../static/UKAndIrelandCircles.png\";\nimport CirclesMapTool from \"../../../components/posts/circlesMapTool/circlesMapTool\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"In the \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"/2019-06-17-circles-everywhere\"\n  }, \"previous blog post\"), \" I showed how to generate Scalable Vector Graphics (SVGs) of small circles packed inside a larger circle using JavaScript. In today's post I'm packing circles inside a map of the UK and Ireland.\"), \"\\n\", React.createElement(_components.p, null, \"The first thing we will need is a black and white map of the UK and Ireland. This is surprisingly difficult to find online, but after some intense search engine work I was able to get one:\"), \"\\n\", React.createElement(\"img\", {\n    style: {\n      width: \"100%\",\n      maxWidth: \"30rem\"\n    },\n    src: UKAndIreland,\n    alt: \"UK and Ireland\"\n  }), \"\\n\", React.createElement(_components.p, null, \"A black and white image allows us to easily check whether a pixel in the image is land (black) or sea (white), using its RGB(Red, Green, Blue) values. White, RGB(255, 255, 255), pixels will have an average RGB of 255 whereas black, RGB(0, 0, 0), pixels will have an average RGB of 0.\"), \"\\n\", React.createElement(_components.p, null, \"The majority of the code is much the same as \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"/2019-06-17-circles-everywhere\"\n  }, \"before\"), \", we just need to change how the circles are placed:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"const image = document.querySelector(\\\"#uk_and_ireland\\\");\\r\\nconst LX = image.width;\\r\\nconst LY = image.height;\\r\\nconst canvas = figure.querySelector(\\\"canvas\\\");\\r\\ncanvas.width = LX;\\r\\ncanvas.height = LY;\\r\\nconst ctx = canvas.getContext(\\\"2d\\\");\\r\\nctx.drawImage(image, 0, 0);\\r\\nconst imageData = ctx.getImageData(0, 0, LX, LY).data;\\r\\n\\r\\nfunction placeCircle(circles, radius, imageData, circleColours, LX, LY) {\\r\\n  //The guard number: if we don't place a circle within this number of trials, we give up.\\r\\n  let guard = 500;\\r\\n  while (guard > 0) {\\r\\n    // Pick a random position on the image.\\r\\n    const cx = randomIntFromInterval(0, LX - 1);\\r\\n    const cy = randomIntFromInterval(0, LY - 1);\\r\\n    const index = (cx + cy * LX) * 4;\\r\\n    const red = imageData[index + 0];\\r\\n    const green = imageData[index + 1];\\r\\n    const blue = imageData[index + 2];\\r\\n    const average = (red + green + blue) / 3;\\r\\n    const overlaps = circles.some(existingCircle =>\\r\\n      overlapWith(\\r\\n        cx,\\r\\n        cy,\\r\\n        radius,\\r\\n        existingCircle.cx,\\r\\n        existingCircle.cy,\\r\\n        existingCircle.r\\r\\n      )\\r\\n    );\\r\\n    // The circle doesn't overlap with any other circles and its in the dark image area.\\r\\n    if (!overlaps && average < 255 / 2) {\\r\\n      const circle = {\\r\\n        cx: cx,\\r\\n        cy: cy,\\r\\n        r: radius,\\r\\n        colour: circleColours[randomIntFromInterval(0, 3)],\\r\\n      };\\r\\n      circles.push(circle);\\r\\n      return;\\r\\n    }\\r\\n    guard -= 1;\\r\\n  }\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"We can use the half way point between 0 and 255 (128) to determine if a pixel is black or white. If the pixel is black and the circle doesn't overlap with any of the others then we place it otherwise we find a different location on the image.\"), \"\\n\", React.createElement(_components.p, null, \"The finished result (with 3000 circle place attempts!) looks pretty good:\"), \"\\n\", React.createElement(\"img\", {\n    style: {\n      width: \"100%\",\n      maxWidth: \"30rem\"\n    },\n    src: UKAndIrelandCircles,\n    alt: \"UK and Ireland Circles\"\n  }), \"\\n\", React.createElement(_components.p, null, \"Here's a smaller interactive version, so you can make your own:\"), \"\\n\", React.createElement(CirclesMapTool), \"\\n\", React.createElement(_components.p, null, \"As always all of the code is available on my \", React.createElement(\"a\", {\n    href: \"https://github.com/george-pearson\",\n    class: \"blueLink\"\n  }, \"GitHub\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n"],"names":["control","controlGroup","displayBlock","displayNone","placeCircle","circles","radius","imageData","circleColours","LX","LY","guard","cx","randomIntFromInterval","cy","index","average","some","existingCircle","overlapWith","r","circle","colour","push","min","max","Math","floor","random","cx1","cy1","r1","cx2","cy2","r2","sqrt","CirclesMapTool","canvas","useRef","image","colour1","setColour1","useState","colour2","setColour2","colour3","setColour3","colour4","setColour4","rmin","setRmin","rmax","setRmax","defaultImageHidden","setDefaultImageHidden","React","className","style","ref","src","UKAndIrelandSmall","alt","type","value","onChange","e","target","htmlFor","id","step","parseFloat","onClick","round","current","naturalWidth","naturalHeight","inMemoryCanvas","document","createElement","width","height","inMemoryCtx","getContext","drawImage","n","radii","i","sort","reverse","makeCircles","getImageData","data","svg","svgNamespace","circleElements","map","xmlns","fill","apply","concat","_toConsumableArray","createReactSVG","svgString","ReactDOMServer","blob","Blob","url","URL","createObjectURL","img","Image","onload","revokeObjectURL","_createMdxContent","props","_components","Object","assign","p","pre","code","_provideComponents","components","class","href","maxWidth","UKAndIreland","UKAndIrelandCircles","wrapper","MDXLayout","MDXContext","useMDXComponents","contextComponents","emptyObject","MDXProvider","children","disableParentContext","allComponents","Provider"],"sourceRoot":""}