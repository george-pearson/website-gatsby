{"version":3,"sources":["webpack:///./src/pages/posts/2019-02-09-hello-world/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","MDXContent","components","props","mdxType","href","className","parentName","commonStyle","style","width","src","sunset","alt","isMDXComponent"],"mappings":"0PAOO,IAAMA,EAAe,CAC1B,MAAS,eACT,SAAY,oGACZ,KAAQ,cAQJC,EAAc,CAClBD,gBAEIE,EAAY,UACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cAACH,EAAD,iBAAeD,EAAiBI,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,2UACA,mDACA,4IAAyH,mBAAGC,KAAK,+CAA+CC,UAAU,YAAjE,eAAzH,mMAA4Z,wBAAQC,WAAW,KAAnB,gBAA5Z,yBAAse,mBAAGD,UAAU,WAAWD,KAAK,6BAA7B,gBAAte,0GAA8pB,mBAAGA,KAAK,wBAAwBC,UAAU,YAA1C,UAA9pB,sGAAw0B,mBAAGD,KAAK,gDAAgDC,UAAU,YAAlE,YAAx0B,sCAA48B,mCAAKC,WAAW,KAAQ,CACh+B,GAAM,YACL,iCAAGA,WAAW,OAAU,CACvB,KAAQ,QACR,UAAa,iBAFd,MAFL,KAMA,kFAA+D,mBAAGF,KAAK,qCAAqCC,UAAU,YAAvD,YAA/D,KACA,yBAAK,oCAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,gEAML,iFAA8D,mBAAGF,KAAK,sCAAsCC,UAAU,YAAxD,YAA9D,QAA0J,mBAAGD,KAAK,qDAAqDC,UAAU,YAAvE,WAA1J,kDACA,yCACA,0EAAuD,mBAAGD,KAAK,4BAA4BC,UAAU,YAA9C,aAAvD,gMAAkU,mBAAGD,KAAK,yBAAyBC,UAAU,YAA3C,QAAlU,yEACA,yBAAK,oCAAMC,WAAW,OAAU,CAC5B,UAAa,kBADZ,4iBA4BL,sFAAmE,4BAAYA,WAAW,KAAvB,mBAAnE,2BAA0J,4BAAYA,WAAW,KAAvB,wBAA1J,yBAAoP,4BAAYA,WAAW,KAAvB,WAApP,wEACA,qEAAkD,mBAAGF,KAAK,sBAAsBC,UAAU,YAAxC,QAAlD,qGACA,wBACE,oBAAIC,WAAW,MAAf,iDACA,oBAAIA,WAAW,MAAf,uCACA,oBAAIA,WAAW,MAAf,2DACA,oBAAIA,WAAW,MAAf,qDAEF,uKACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mRAaL,kCACA,qBAAKD,UAAWE,sBAChB,qBAAKF,UAAWE,iBACZ,qBAAKC,MAAO,CACVC,MAAO,QACNC,IAAKC,IAAQC,IAAI,YAExB,qBAAKP,UAAWE,kBACZ,6EAAsD,mBAAGF,UAAU,WAAWD,KAAK,WAA7B,UAAtD,6IAAiP,mBAAGC,UAAU,WAAWD,KAAK,wBAA7B,WAAjP,mEAGJ,sCACA,4cAEA,oBAAS,CACP,UAAa,aAEb,oBAAIE,WAAW,QACf,oBAAIA,WAAW,OACb,kCAAIA,WAAW,MAAS,CACtB,GAAM,SADR,0BAE8B,iCAAGA,WAAW,MAAS,CACjD,KAAQ,WACR,UAAa,qBAFa,SAStCN,EAAWa,gBAAiB","file":"component---src-pages-posts-2019-02-09-hello-world-index-mdx-bf38606969ab05cbb6d4.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport sunset from \"../../../../static/photos/Sunset.jpg\";\nimport * as commonStyle from \"../common.module.css\";\nexport const _frontmatter = {\n  \"title\": \"Hello World!\",\n  \"subtitle\": \"My first blog post on this site. I go over how I made my website and what I learnt along the way.\",\n  \"date\": \"2019-02-09\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`I've finally shipped! After about a month of what seems like going backwards and forwards I've made my first post on my brand new website. I‚Äôm going to try and do at least one post a month, and I plan to keep them relatively short. I can‚Äôt promise they won‚Äôt end up longer though if I really get into it!`}</p>\n    <h2>{`Jekyll and GitHub Pages`}</h2>\n    <p>{`So you want to know how I made this site right? Well initially I was thinking of using what I know from work - C# `}<a href=\"https://dotnet.microsoft.com/apps/aspnet/mvc\" className=\"blueLink\">{`ASP.NET MVC`}</a>{`. But I figured it would be better if I learnt something new and all that server side setup and maintenance seemed like a pain. After a recommendation from a friend I found that GitHub offers `}<strong parentName=\"p\">{`free hosting`}</strong>{` for websites running `}<a className=\"blueLink\" href=\"https://pages.github.com/\">{`GitHub Pages`}</a>{`. This seemed perfect for what I needed and no server side hassle! From GitHub Pages I was directed to `}<a href=\"https://jekyllrb.com/\" className=\"blueLink\">{`Jekyll`}</a>{`. Jekyll is an amazing open source blogging tool, which among other things has inbuilt support for `}<a href=\"https://daringfireball.net/projects/markdown/\" className=\"blueLink\">{`Markdown`}</a>{` making writing blog posts a breeze`}<sup parentName=\"p\" {...{\n        \"id\": \"fnref-1\"\n      }}><a parentName=\"sup\" {...{\n          \"href\": \"#fn-1\",\n          \"className\": \"footnote-ref\"\n        }}>{`1`}</a></sup>{`.`}</p>\n    <p>{`Here's an example of the JavaScript markdown which uses `}<a href=\"https://pypi.org/project/Pygments/\" className=\"blueLink\">{`Pygments`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`(function() {\n    console.log(\"Hello World! üòä\");\n})();\n`}</code></pre>\n    <p>{`Jekyll also has a great HTML templating through use of `}<a href=\"https://jekyllrb.com/docs/includes/\" className=\"blueLink\">{`includes`}</a>{` and `}<a href=\"https://jekyllrb.com/docs/step-by-step/04-layouts/\" className=\"blueLink\">{`layouts`}</a>{` which help keep your project well structured.`}</p>\n    <h2>{`Sass and Gulp`}</h2>\n    <p>{`At work we predominantly use CSS libraries like `}<a href=\"https://getbootstrap.com/\" className=\"blueLink\">{`Bootstrap`}</a>{`, but one thing I decided fairly early on was that I was going to develop all the CSS myself to improve my front-end skills. After a bit of online research I decided I was going to use the `}<a href=\"https://sass-lang.com/\" className=\"blueLink\">{`Sass`}</a>{` CSS templating language. Here's the Sass for those crazy blue links:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$color--skyblue: #00c1c1;\n$color--white: #fff;\n\n%transition-duration {\n    transition-duration: 0.5s;\n}\n\n.blueLink, %blueLink {\n    color: $color--skyblue;\n    text-decoration: none;\n    background-image: linear-gradient(\n        to top,\n        $color--skyblue,\n        $color--skyblue 50%,\n        transparent 50%,\n        transparent);\n    background-position: 0% 0%;\n    background-size: 100% 200%;\n    @extend %transition-duration;\n\n    &:hover{\n        color: $color--white;\n        background-position: 0 100%;\n    }\n}\n`}</code></pre>\n    <p>{`Sass makes your CSS code simpler with things like variables `}<inlineCode parentName=\"p\">{`$color--skyblue`}</inlineCode>{`, placeholder selectors `}<inlineCode parentName=\"p\">{`%transition-duration`}</inlineCode>{` and parent selectors `}<inlineCode parentName=\"p\">{`&:hover`}</inlineCode>{`. Essentially Sass means you don't have to repeat yourself so often!`}</p>\n    <p>{`While investigating Sass I was directed to `}<a href=\"https://gulpjs.com/\" className=\"blueLink\">{`Gulp`}</a>{` a DevOps build tool. Gulp essentially allows you to automate command line tools for things like:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Compiling Sass files to CSS when they change.`}</li>\n      <li parentName=\"ul\">{`Minifying JavaScript and CSS files.`}</li>\n      <li parentName=\"ul\">{`Running a Jekyll build when a markdown file is updated.`}</li>\n      <li parentName=\"ul\">{`Reloading your browser once a build is complete.`}</li>\n    </ul>\n    <p>{`This makes development a lot easier and faster. Here's an example of a gulp command that compiles a Sass file and minifies the outputed CSS:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Compile .scss files.\n */\ngulp.task(\"sass\", function () {\n    return gulp.src(\"_scss/main.scss\")\n        .pipe(sass().on(\"error\", sass.logError))\n        .pipe(cssnano())\n        .pipe(rename(\"main.min.css\"))\n        .pipe(gulp.dest(\"assets/css/\"));\n});\n`}</code></pre>\n    <h2>{`Photos`}</h2>\n    <div className={commonStyle.halfWidthContainer}>\n    <div className={commonStyle.halfWidthLeft}>\n        <img style={{\n          width: \"100%\"\n        }} src={sunset} alt=\"sunset\" />\n    </div>\n    <div className={commonStyle.halfWidthRight}>\n        <p>One thing I thought I'd share on this blog is some <a className=\"blueLink\" href=\"/Photos\">photos</a> I've taken on my travels. In the future I'd like to develop that area into a gallery of some kind. The photos have been compressed using <a className=\"blueLink\" href=\"https://squoosh.app/\">Squoosh</a> making them take up less space and load quickly (hopefully).</p>\n    </div>\n    </div>\n    <h2>{`Conclusion`}</h2>\n    <p>{`In fact creating this website was a lot easier than I imagined thanks to all the great freely available open source tools on the web. Now that I started writing about some of these tools I realised most of them probably need an entire post to be explained with any detail. So I might be doing some \"idiots guide to...\" posts in the near future. Anyhow hope you enjoyed my first post and are looking forward to the next instalment. üòè`}</p>\n\n    <div {...{\n      \"className\": \"footnotes\"\n    }}>\n      <hr parentName=\"div\"></hr>\n      <ol parentName=\"div\">\n        <li parentName=\"ol\" {...{\n          \"id\": \"fn-1\"\n        }}>{`That's the plan anyway!`}<a parentName=\"li\" {...{\n            \"href\": \"#fnref-1\",\n            \"className\": \"footnote-backref\"\n          }}>{`‚Ü©`}</a></li>\n      </ol>\n    </div>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}