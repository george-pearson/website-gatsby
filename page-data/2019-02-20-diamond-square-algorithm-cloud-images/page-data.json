{"componentChunkName":"component---src-templates-post-template-post-template-js","path":"/2019-02-20-diamond-square-algorithm-cloud-images/","result":{"data":{"mdx":{"id":"b3089e52-ec8a-56c3-9300-be6e4d140e48","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Diamond-square Algorithm Cloud Images\",\n  \"subtitle\": \"I show off some JavaScript code to make cool cloud images using the Diamond-square algorithm.\",\n  \"date\": \"2019-02-20\",\n  \"image\": \"./cloudImage.jpg\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Diamond-square_algorithm\",\n    className: \"blueLink\"\n  }, \"Diamond-square algorithm (DSA)\"), \" is a popular method used to generate realistic \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Heightmap\",\n    className: \"blueLink\"\n  }, \"heightmaps\"), \" which resemble clouds, terrain and/or plasma. The JavaScript code below can be used to generate square cloud images of size \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"N = 2^(n+1)\"), \". The images make great unique backgrounds (I have one on my phone!) and look rather pretty in my opinion.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var n = 9;\\nvar N = Math.pow(2, n) + 1;\\nvar arr;\\n\\nfunction runDSA(N) {\\n  // Initialise the array with random numbers at its corners\\n  arr = create2Darray(N, N);\\n  arr[0][0] = 2 * Math.random() - 1;\\n  arr[0][N - 1] = 2 * Math.random() - 1;\\n  arr[N - 1][0] = 2 * Math.random() - 1;\\n  arr[N - 1][N - 1] = 2 * Math.random() - 1;\\n\\n  var side = N - 1;\\n  var nSq = 1; // Number of Squares.\\n  var f = 1.0; // f scales the random numbers at each stage of the algorithm\\n  while (side > 1) {\\n    var sideo2 = Math.round(side / 2);\\n    var x0, x1, y0, y1, xc, yc, tot, ntot, dx, dy, xs, ys;\\n    var diff = [[-1, 0], [1, 0], [0, -1], [0, 1]];\\n    // Diamond step:\\n    for (var ix = 0; ix < nSq; ix++) {\\n      for (var iy = 0; iy < nSq; iy++) {\\n        x0 = ix * side;\\n        x1 = (ix + 1) * side;\\n        y0 = iy * side;\\n        y1 = (iy + 1) * side;\\n        xc = x0 + sideo2;\\n        yc = y0 + sideo2;\\n        // Set this pixel to the mean of its \\\"diamond\\\" neighbours plus\\n        // a random offset.\\n        arr[xc][yc] =\\n          (arr[y0][x0] + arr[y0][x1] + arr[y1][x0] + arr[y1][x1]) / 4;\\n        arr[xc][yc] += f * (2 * Math.random() - 1);\\n      }\\n    }\\n\\n    //Square step:\\n    for (var ix = 0; ix < 2 * nSq + 1; ix++) {\\n      xc = sideo2 * ix;\\n      for (var iy = 0; iy < 2 * nSq + 1; iy++) {\\n        yc = side * iy + sideo2 * (1 - (ix % 2));\\n        if (!(xc < N && xc > 0 && yc < N && yc > 0)) {\\n          continue;\\n        }\\n        tot = 0.0;\\n        ntot = 0;\\n        // Set this pixel to the mean of its \\\"square\\\" neighbours plus\\n        // a random offset. At the edges, it has only three neighbours.\\n        for (var ii = 0; ii < diff.length; ii++) {\\n          dx = diff[ii][0];\\n          dy = diff[ii][1];\\n          xs = xc + dx * sideo2;\\n          ys = yc + dy * sideo2;\\n          if (!(xs < N && xs > 0 && ys < N && ys > 0)) {\\n            continue;\\n          } else {\\n            tot += arr[xs][ys];\\n            ntot += 1;\\n          }\\n        }\\n        arr[xc][yc] += tot / ntot + f * (2 * Math.random() - 1);\\n      }\\n    }\\n    side = sideo2;\\n    nSq = nSq * 2;\\n    f = f / 2;\\n  }\\n  return arr;\\n}\\n\")), mdx(\"p\", null, \"I've packaged the DSA code up into a easy to use tool with colour selectors below. This code:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Runs the DSA, for \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"n = 9\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Scales the range from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[-1, +1]\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[0, +1]\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Creates a hidden \", mdx(\"a\", {\n    href: \"https://www.w3schools.com/graphics/canvas_intro.asp\",\n    className: \"blueLink\"\n  }, \"Canvas\"), \" of size \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"N = 2^(n+1)\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Adds pixels to the Canvas with \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/RGBA_color_space\",\n    className: \"blueLink\"\n  }, \"RGBA\"), \" values scaled by the DSA output.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Converts the canvas to an image and displays it on the screen.\")), mdx(\"p\", null, \"Just hit \\\"Reload\\\" below and you'll have your very own cloud image!\"), mdx(DSATool, {\n    mdxType: \"DSATool\"\n  }), mdx(\"p\", null, \"The full code for this is available on my \", mdx(\"a\", {\n    href: \"https://github.com/george-pearson\",\n    className: \"blueLink\"\n  }, \"GitHub\"), \". If you want a bigger image just increase \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n\"), \". Please bear in mind I've found \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"n > 11\"), \" tends to give my laptop a hard time and I haven't tested this on mobile so be careful (wouldn't want your browser to crash!).\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Diamond-square Algorithm Cloud Images","date":"February 20, 2019","subtitle":"I show off some JavaScript code to make cool cloud images using the Diamond-square algorithm.","image":"./cloudImage.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-02-20-diamond-square-algorithm-cloud-images/","previous":{"fields":{"slug":"/2019-02-09-hello-world/"},"frontmatter":{"title":"Hello World!"}},"next":{"fields":{"slug":"/2019-03-06-svg-path-animations/"},"frontmatter":{"title":"SVG Path Animations"}}}}}