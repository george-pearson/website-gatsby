{"componentChunkName":"component---src-templates-post-template-post-template-js","path":"/2019-04-06-the-game-of-life/","result":{"data":{"mdx":{"id":"43251d9c-01e1-5e3b-8a9a-50f467d1aec0","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"The Game Of Life\",\n  \"subtitle\": \"A post about Conway's Game Of Life, and some JavaScript code to simulate it.\",\n  \"date\": \"2019-04-06\",\n  \"image\": \"gol.png\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n  }, \"Game of Life\"), \" is a \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Cellular_automaton\"\n  }, \"cellular automataton\"), \" designed by the British mathematician \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/John_Horton_Conway\"\n  }, \"John Conway\"), \". A cellular automataton is a mathematical model that consists of a grid of cells, with each cell having an finite number of states (e.g \\\"on\\\" or \\\"off\\\"). A new grid configuration (a new \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"generation\"), \") is created according to a fixed set of rules that determine the state of each cell based on its current state and the state of the cells around it (its \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"neighbourhood\"), \"). Cellular automata can be used to simulate a variety of real-world systems, from the \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Belousov%E2%80%93Zhabotinsky_reaction\"\n  }, \"Belousov\\u2013Zhabotinsky reaction\"), \" to \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"https://blogs.msdn.microsoft.com/calvin_hsia/2014/09/30/fish-vs-sharks-predator-prey-simulation/\"\n  }, \"predator prey relationships\"), \".\"), mdx(\"p\", null, \"In Conway's Game of Life, the grid is a 2D array of square cells each with two states \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"alive\"), \" and \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"dead\"), \". Each cell interacts with its 8 neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent to it. The rules are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any live cell with fewer than two live neighbours dies, as if by underpopulation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any live cell with two or three live neighbours lives on to the next generation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any live cell with more than three live neighbours dies, as if by overpopulation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\")), mdx(\"p\", null, \"We can get the number of alive neighbours of a cell in 2D array with the code below. Note we are applying \", mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Periodic_boundary_conditions\",\n    className: \"blueLink\"\n  }, \"periodic boundary conditions\"), \" in both the x and y directions.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var ALIVE = 1;\\nvar DEAD = 0;\\nvar N = 200;\\nvar arr = create2Darray(N, N, DEAD); // Iitialises a new 2D array with array values set to 0.\\nvar neighbourhood = [\\n  [1, 0],\\n  [1, 1],\\n  [0, 1],\\n  [-1, 1],\\n  [-1, 0],\\n  [-1, -1],\\n  [0, -1],\\n  [1, -1],\\n];\\n\\n// Get number of ALIVE neighbours for point (x,y)\\nfunction getneighcount(arr, x, y) {\\n  var nc = 0;\\n  for (var nn = 0; nn < neighbourhood.length; nn++) {\\n    var dx = neighbourhood[nn][0];\\n    var dy = neighbourhood[nn][1];\\n    if (arr[pbcz(x + dx, arr.length)][pbcz(y + dy, arr[x].length)] === ALIVE) {\\n      nc++;\\n    }\\n  }\\n  return nc;\\n}\\n\\n// Periodic boundary conditions in z-direction:\\nfunction pbcz(iz, Lz) {\\n  if (iz >= Lz) {\\n    iz = iz - Lz;\\n  }\\n  if (iz < 0) {\\n    iz = iz + Lz;\\n  }\\n  return iz;\\n}\\n\")), mdx(\"p\", null, \"Then we can just turn the Game of Life rules into some simple JavaScript code:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var ALIVE = 1;\\nvar DEAD = 0;\\nvar N = 200;\\nvar arr = create2Darray(N, N, DEAD); // Iitialises a new 2D array with array values set to 0.\\nvar requestId;\\ngameLoop();\\n\\n// Runs forever, call cancelAnimationFrame(requestId) to stop.\\nfunction gameLoop() {\\n  arr = iterate(arr);\\n  print_to_canvas(arr);\\n  requestId = requestAnimationFrame(gameLoop);\\n}\\n\\n// Iterate the next state of the array.\\nfunction iterate(oldArray) {\\n  var newArray = clone2Darray(oldArray);\\n  for (var x = 0; x < oldArray.length; x++) {\\n    for (var y = 0; y < oldArray[0].length; y++) {\\n      var aliveNeighbourCount = getneighcount(oldArray, x, y);\\n      if (oldArray[x][y] === ALIVE) {\\n        if (aliveNeighbourCount < 2) {\\n          newArray[x][y] = DEAD; // Underpopulation kills cell.\\n        } else if (aliveNeighbourCount === 2 || aliveNeighbourCount === 3) {\\n          newArray[x][y] = ALIVE; // Surivies!\\n        } else if (aliveNeighbourCount > 3) {\\n          newArray[x][y] = DEAD; // Overpopulation kills cell.\\n        }\\n      } else if (oldArray[x][y] === DEAD && aliveNeighbourCount === 3) {\\n        newArray[x][y] = ALIVE; // Reproduction.\\n      }\\n    }\\n  }\\n  return newArray;\\n}\\n\")), mdx(\"p\", null, \"I've packaged the Game of Life code up into interactive tool below.\"), mdx(GOLTool, {\n    mdxType: \"GOLTool\"\n  }), mdx(\"p\", null, \"The full code for this tool is available on my \", mdx(\"a\", {\n    href: \"https://github.com/george-pearson\",\n    className: \"blueLink\"\n  }, \"GitHub\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"The Game Of Life","date":"April 06, 2019","subtitle":"A post about Conway's Game Of Life, and some JavaScript code to simulate it.","image":"gol.png"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-04-06-the-game-of-life/","previous":{"fields":{"slug":"/2019-03-06-svg-path-animations/"},"frontmatter":{"title":"SVG Path Animations"}},"next":{"fields":{"slug":"/2019-05-19-sobel/"},"frontmatter":{"title":"Sobel Edge Detection"}}}}}