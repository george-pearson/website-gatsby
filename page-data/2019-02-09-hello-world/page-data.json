{"componentChunkName":"component---src-templates-post-template-post-template-js","path":"/2019-02-09-hello-world/","webpackCompilationHash":"f1e6bc7acb7b2aab0a73","result":{"data":{"mdx":{"id":"dce2b1c9-599c-5b36-af4c-ebf81bc87f4a","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Hello World!\",\n  \"subtitle\": \"My first blog post on this site. I go over how I made my website and what I learnt along the way.\",\n  \"date\": \"2019-02-09\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I've finally shipped! After about a month of what seems like going backwards and forwards I've made my first post on my brand new website. I\\u2019m going to try and do at least one post a month, and I plan to keep them relatively short. I can\\u2019t promise they won\\u2019t end up longer though if I really get into it!\"), mdx(\"h2\", null, \"Jekyll and GitHub Pages\"), mdx(\"p\", null, \"So you want to know how I made this site right? Well initially I was thinking of using what I know from work - C# \", mdx(\"a\", {\n    href: \"https://dotnet.microsoft.com/apps/aspnet/mvc\",\n    className: \"blueLink\"\n  }, \"ASP.NET MVC\"), \". But I figured it would be better if I learnt something new and all that server side setup and maintenance seemed like a pain. After a recommendation from a friend I found that GitHub offers \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"free hosting\"), \" for websites running \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"https://pages.github.com/\"\n  }, \"GitHub Pages\"), \". This seemed perfect for what I needed and no server side hassle! From GitHub Pages I was directed to \", mdx(\"a\", {\n    href: \"https://jekyllrb.com/\",\n    className: \"blueLink\"\n  }, \"Jekyll\"), \". Jekyll is an amazing open source blogging tool, which among other things has inbuilt support for \", mdx(\"a\", {\n    href: \"https://daringfireball.net/projects/markdown/\",\n    className: \"blueLink\"\n  }, \"Markdown\"), \" making writing blog posts a breeze\", mdx(\"sup\", _extends({\n    parentName: \"p\"\n  }, {\n    \"id\": \"fnref-1\"\n  }), mdx(\"a\", _extends({\n    parentName: \"sup\"\n  }, {\n    \"href\": \"#fn-1\",\n    \"className\": \"footnote-ref\"\n  }), \"1\")), \".\"), mdx(\"p\", null, \"Here's an example of the JavaScript markdown which uses \", mdx(\"a\", {\n    href: \"https://pypi.org/project/Pygments/\",\n    className: \"blueLink\"\n  }, \"Pygments\"), \":\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"(function() {\\n    console.log(\\\"Hello World! \\uD83D\\uDE0A\\\");\\n})();\\n\")), mdx(\"p\", null, \"Jekyll also has a great HTML templating through use of \", mdx(\"a\", {\n    href: \"https://jekyllrb.com/docs/includes/\",\n    className: \"blueLink\"\n  }, \"includes\"), \" and \", mdx(\"a\", {\n    href: \"https://jekyllrb.com/docs/step-by-step/04-layouts/\",\n    className: \"blueLink\"\n  }, \"layouts\"), \" which help keep your project well structured.\"), mdx(\"h2\", null, \"Sass and Gulp\"), mdx(\"p\", null, \"At work we predominantly use CSS libraries like \", mdx(\"a\", {\n    href: \"https://getbootstrap.com/\",\n    className: \"blueLink\"\n  }, \"Bootstrap\"), \", but one thing I decided fairly early on was that I was going to develop all the CSS myself to improve my front-end skills. After a bit of online research I decided I was going to use the \", mdx(\"a\", {\n    href: \"https://sass-lang.com/\",\n    className: \"blueLink\"\n  }, \"Sass\"), \" CSS templating language. Here's the Sass for those crazy blue links:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-scss\"\n  }), \"$color--skyblue: #00c1c1;\\n$color--white: #fff;\\n\\n%transition-duration {\\n    transition-duration: 0.5s;\\n}\\n\\n.blueLink, %blueLink {\\n    color: $color--skyblue;\\n    text-decoration: none;\\n    background-image: linear-gradient(\\n        to top,\\n        $color--skyblue,\\n        $color--skyblue 50%,\\n        transparent 50%,\\n        transparent);\\n    background-position: 0% 0%;\\n    background-size: 100% 200%;\\n    @extend %transition-duration;\\n\\n    &:hover{\\n        color: $color--white;\\n        background-position: 0 100%;\\n    }\\n}\\n\")), mdx(\"p\", null, \"Sass makes your CSS code simpler with things like variables \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"$color--skyblue\"), \", placeholder selectors \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"%transition-duration\"), \" and parent selectors \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"&:hover\"), \". Essentially Sass means you don't have to repeat yourself so often!\"), mdx(\"p\", null, \"While investigating Sass I was directed to \", mdx(\"a\", {\n    href: \"https://gulpjs.com/\",\n    className: \"blueLink\"\n  }, \"Gulp\"), \" a DevOps build tool. Gulp essentially allows you to automate command line tools for things like:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Compiling Sass files to CSS when they change.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Minifying JavaScript and CSS files.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Running a Jekyll build when a markdown file is updated.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reloading your browser once a build is complete.\")), mdx(\"p\", null, \"This makes development a lot easier and faster. Here's an example of a gulp command that compiles a Sass file and minifies the outputed CSS:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"/**\\n * Compile .scss files.\\n */\\ngulp.task(\\\"sass\\\", function () {\\n    return gulp.src(\\\"_scss/main.scss\\\")\\n        .pipe(sass().on(\\\"error\\\", sass.logError))\\n        .pipe(cssnano())\\n        .pipe(rename(\\\"main.min.css\\\"))\\n        .pipe(gulp.dest(\\\"assets/css/\\\"));\\n});\\n\")), mdx(\"h2\", null, \"Photos\"), mdx(\"div\", {\n    className: commonStyle.halfWidthContainer\n  }, mdx(\"div\", {\n    className: commonStyle.halfWidthLeft\n  }, mdx(\"img\", {\n    style: {\n      width: \"100%\"\n    },\n    src: sunset,\n    alt: \"sunset\"\n  })), mdx(\"div\", {\n    className: commonStyle.halfWidthRight\n  }, mdx(\"p\", null, \"One thing I thought I'd share on this blog is some \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"/Photos\"\n  }, \"photos\"), \" I've taken on my travels. In the future I'd like to develop that area into a gallery of some kind. The photos have been compressed using \", mdx(\"a\", {\n    className: \"blueLink\",\n    href: \"https://squoosh.app/\"\n  }, \"Squoosh\"), \" making them take up less space and load quickly (hopefully).\"))), mdx(\"h2\", null, \"Conclusion\"), mdx(\"p\", null, \"In fact creating this website was a lot easier than I imagined thanks to all the great freely available open source tools on the web. Now that I started writing about some of these tools I realised most of them probably need an entire post to be explained with any detail. So I might be doing some \\\"idiots guide to...\\\" posts in the near future. Anyhow hope you enjoyed my first post and are looking forward to the next instalment. \\uD83D\\uDE0F\"), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ol\"\n  }, {\n    \"id\": \"fn-1\"\n  }), \"That's the plan anyway!\", mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#fnref-1\",\n    \"className\": \"footnote-backref\"\n  }), \"\\u21A9\")))));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"Hello World!","date":"February 09, 2019","subtitle":"My first blog post on this site. I go over how I made my website and what I learnt along the way.","image":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/2019-02-09-hello-world/","previous":null,"next":{"fields":{"slug":"/2019-02-20-diamond-square-algorithm-cloud-images/"},"frontmatter":{"title":"Diamond-square Algorithm Cloud Images"}}}}}