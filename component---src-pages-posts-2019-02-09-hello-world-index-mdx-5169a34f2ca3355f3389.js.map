{"version":3,"file":"component---src-pages-posts-2019-02-09-hello-world-index-mdx-5169a34f2ca3355f3389.js","mappings":"uPASaA,EAAe,CAC1B,MAAS,eACT,SAAY,oGACZ,KAAQ,cAEJC,EAAc,CAClBD,aAAAA,GAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,uUACA,+CACA,wIAAyH,cAAGC,KAAK,+CAA+CC,UAAU,YAAjE,eAAzH,oMAA4Z,mBAAQC,WAAW,KAAnB,gBAA5Z,0BAAse,cAAGD,UAAU,WAAWD,KAAK,6BAA7B,gBAAte,2GAA8pB,cAAGA,KAAK,wBAAwBC,UAAU,YAA1C,UAA9pB,uGAAw0B,cAAGD,KAAK,gDAAgDC,UAAU,YAAlE,YAAx0B,uCAA48B,gBAAKC,WAAW,IACx9B,GAAM,YACL,cAAGA,WAAW,MACb,KAAQ,QACR,UAAa,gBAFd,MAFL,MAMA,8EAA+D,cAAGF,KAAK,qCAAqCC,UAAU,YAAvD,YAA/D,MACA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,uBADZ,+DAML,6EAA8D,cAAGF,KAAK,sCAAsCC,UAAU,YAAxD,YAA9D,SAA0J,cAAGD,KAAK,qDAAqDC,UAAU,YAAvE,WAA1J,mDACA,qCACA,sEAAuD,cAAGD,KAAK,4BAA4BC,UAAU,YAA9C,aAAvD,iMAAkU,cAAGD,KAAK,yBAAyBC,UAAU,YAA3C,QAAlU,0EACA,qBAAK,iBAAMC,WAAW,MAClB,UAAa,iBADZ,qgBA8BL,kFAAmE,uBAAYA,WAAW,KAAvB,mBAAnE,4BAA0J,uBAAYA,WAAW,KAAvB,wBAA1J,0BAAoP,uBAAYA,WAAW,KAAvB,WAApP,yEACA,iEAAkD,cAAGF,KAAK,sBAAsBC,UAAU,YAAxC,QAAlD,sGACA,oBACE,eAAIC,WAAW,MAAf,kDACA,eAAIA,WAAW,MAAf,wCACA,eAAIA,WAAW,MAAf,4DACA,eAAIA,WAAW,MAAf,sDAEF,mKACA,qBAAK,iBAAMA,WAAW,MAClB,UAAa,uBADZ,uQAcL,8BACA,gBAAKD,UAAWE,EAAAA,qBAClB,gBAAKF,UAAWE,EAAAA,gBACd,gBAAKC,MAAO,CACNC,MAAO,QACNC,IAAKC,EAAAA,EAAQC,IAAI,aAE1B,gBAAKP,UAAWE,EAAAA,iBACd,yEAEO,cAAGF,UAAU,WAAWD,KAAK,WAA7B,UAFP,8IAKQ,cAAGC,UAAU,WAAWD,KAAK,wBAA7B,WALR,oEAUA,kCACA,wcAEA,gBACE,UAAa,cAEb,eAAIE,WAAW,SACf,eAAIA,WAAW,QACb,eAAIA,WAAW,KACb,GAAM,QADR,2BAE8B,cAAGA,WAAW,KACxC,KAAQ,WACR,UAAa,oBAFa,SAStCN,EAAWa,gBAAiB,G,qBCpIb,SAASC,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,E","sources":["webpack://blog/./src/pages/posts/2019-02-09-hello-world/index.mdx","webpack://blog/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport sunset from \"../../../../static/photos/Sunset.jpg\";\nimport * as commonStyle from \"../common.module.css\";\nexport const _frontmatter = {\n  \"title\": \"Hello World!\",\n  \"subtitle\": \"My first blog post on this site. I go over how I made my website and what I learnt along the way.\",\n  \"date\": \"2019-02-09\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`I've finally shipped! After about a month of what seems like going backwards and forwards I've made my first post on my brand new website. I‚Äôm going to try and do at least one post a month, and I plan to keep them relatively short. I can‚Äôt promise they won‚Äôt end up longer though if I really get into it!`}</p>\n    <h2>{`Jekyll and GitHub Pages`}</h2>\n    <p>{`So you want to know how I made this site right? Well initially I was thinking of using what I know from work - C# `}<a href=\"https://dotnet.microsoft.com/apps/aspnet/mvc\" className=\"blueLink\">{`ASP.NET MVC`}</a>{`. But I figured it would be better if I learnt something new and all that server side setup and maintenance seemed like a pain. After a recommendation from a friend I found that GitHub offers `}<strong parentName=\"p\">{`free hosting`}</strong>{` for websites running `}<a className=\"blueLink\" href=\"https://pages.github.com/\">{`GitHub Pages`}</a>{`. This seemed perfect for what I needed and no server side hassle! From GitHub Pages I was directed to `}<a href=\"https://jekyllrb.com/\" className=\"blueLink\">{`Jekyll`}</a>{`. Jekyll is an amazing open source blogging tool, which among other things has inbuilt support for `}<a href=\"https://daringfireball.net/projects/markdown/\" className=\"blueLink\">{`Markdown`}</a>{` making writing blog posts a breeze`}<sup parentName=\"p\" {...{\n        \"id\": \"fnref-1\"\n      }}><a parentName=\"sup\" {...{\n          \"href\": \"#fn-1\",\n          \"className\": \"footnote-ref\"\n        }}>{`1`}</a></sup>{`.`}</p>\n    <p>{`Here's an example of the JavaScript markdown which uses `}<a href=\"https://pypi.org/project/Pygments/\" className=\"blueLink\">{`Pygments`}</a>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`(function() {\n  console.log(\"Hello World! üòä\");\n})();\n`}</code></pre>\n    <p>{`Jekyll also has a great HTML templating through use of `}<a href=\"https://jekyllrb.com/docs/includes/\" className=\"blueLink\">{`includes`}</a>{` and `}<a href=\"https://jekyllrb.com/docs/step-by-step/04-layouts/\" className=\"blueLink\">{`layouts`}</a>{` which help keep your project well structured.`}</p>\n    <h2>{`Sass and Gulp`}</h2>\n    <p>{`At work we predominantly use CSS libraries like `}<a href=\"https://getbootstrap.com/\" className=\"blueLink\">{`Bootstrap`}</a>{`, but one thing I decided fairly early on was that I was going to develop all the CSS myself to improve my front-end skills. After a bit of online research I decided I was going to use the `}<a href=\"https://sass-lang.com/\" className=\"blueLink\">{`Sass`}</a>{` CSS templating language. Here's the Sass for those crazy blue links:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-scss\"\n      }}>{`$color--skyblue: #00c1c1;\n$color--white: #fff;\n\n%transition-duration {\n  transition-duration: 0.5s;\n}\n\n.blueLink,\n%blueLink {\n  color: $color--skyblue;\n  text-decoration: none;\n  background-image: linear-gradient(\n    to top,\n    $color--skyblue,\n    $color--skyblue 50%,\n    transparent 50%,\n    transparent\n  );\n  background-position: 0% 0%;\n  background-size: 100% 200%;\n  @extend %transition-duration;\n\n  &:hover {\n    color: $color--white;\n    background-position: 0 100%;\n  }\n}\n`}</code></pre>\n    <p>{`Sass makes your CSS code simpler with things like variables `}<inlineCode parentName=\"p\">{`$color--skyblue`}</inlineCode>{`, placeholder selectors `}<inlineCode parentName=\"p\">{`%transition-duration`}</inlineCode>{` and parent selectors `}<inlineCode parentName=\"p\">{`&:hover`}</inlineCode>{`. Essentially Sass means you don't have to repeat yourself so often!`}</p>\n    <p>{`While investigating Sass I was directed to `}<a href=\"https://gulpjs.com/\" className=\"blueLink\">{`Gulp`}</a>{` a DevOps build tool. Gulp essentially allows you to automate command line tools for things like:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Compiling Sass files to CSS when they change.`}</li>\n      <li parentName=\"ul\">{`Minifying JavaScript and CSS files.`}</li>\n      <li parentName=\"ul\">{`Running a Jekyll build when a markdown file is updated.`}</li>\n      <li parentName=\"ul\">{`Reloading your browser once a build is complete.`}</li>\n    </ul>\n    <p>{`This makes development a lot easier and faster. Here's an example of a gulp command that compiles a Sass file and minifies the outputed CSS:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`/**\n * Compile .scss files.\n */\ngulp.task(\"sass\", function() {\n  return gulp\n    .src(\"_scss/main.scss\")\n    .pipe(sass().on(\"error\", sass.logError))\n    .pipe(cssnano())\n    .pipe(rename(\"main.min.css\"))\n    .pipe(gulp.dest(\"assets/css/\"));\n});\n`}</code></pre>\n    <h2>{`Photos`}</h2>\n    <div className={commonStyle.halfWidthContainer}>\n  <div className={commonStyle.halfWidthLeft}>\n    <img style={{\n          width: \"100%\"\n        }} src={sunset} alt=\"sunset\" />\n  </div>\n  <div className={commonStyle.halfWidthRight}>\n    <p>\n      One thing I thought I'd share on this blog is\n      some <a className=\"blueLink\" href=\"/Photos\">photos</a> I've\n      taken on my travels. In the future I'd like to develop that\n      area into a gallery of some kind. The photos have been compressed\n      using <a className=\"blueLink\" href=\"https://squoosh.app/\">Squoosh</a> making\n      them take up less space and load quickly (hopefully).\n    </p>\n  </div>\n    </div>\n    <h2>{`Conclusion`}</h2>\n    <p>{`In fact creating this website was a lot easier than I imagined thanks to all the great freely available open source tools on the web. Now that I started writing about some of these tools I realised most of them probably need an entire post to be explained with any detail. So I might be doing some \"idiots guide to...\" posts in the near future. Anyhow hope you enjoyed my first post and are looking forward to the next instalment. üòè`}</p>\n\n    <div {...{\n      \"className\": \"footnotes\"\n    }}>\n      <hr parentName=\"div\"></hr>\n      <ol parentName=\"div\">\n        <li parentName=\"ol\" {...{\n          \"id\": \"fn-1\"\n        }}>{`That's the plan anyway!`}<a parentName=\"li\" {...{\n            \"href\": \"#fnref-1\",\n            \"className\": \"footnote-backref\"\n          }}>{`‚Ü©`}</a></li>\n      </ol>\n    </div>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      ","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","href","className","parentName","commonStyle","style","width","src","sunset","alt","isMDXComponent","_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}