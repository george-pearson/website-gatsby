"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[502],{4547:function(e,n,a){a.r(n),a.d(n,{_frontmatter:function(){return r},default:function(){return m}});var t=a(3366),s=(a(7294),a(3497)),o=a(758),l=a(2046),i=["components"],r={title:"Hello World!",subtitle:"My first blog post on this site. I go over how I made my website and what I learnt along the way.",date:"2019-02-09"},d={_frontmatter:r};function m(e){var n=e.components,a=(0,t.Z)(e,i);return(0,s.mdx)("wrapper",Object.assign({},d,a,{components:n,mdxType:"MDXLayout"}),(0,s.mdx)("p",null,"I've finally shipped! After about a month of what seems like going backwards and forwards I've made my first post on my brand new website. I‚Äôm going to try and do at least one post a month, and I plan to keep them relatively short. I can‚Äôt promise they won‚Äôt end up longer though if I really get into it!"),(0,s.mdx)("h2",null,"Jekyll and GitHub Pages"),(0,s.mdx)("p",null,"So you want to know how I made this site right? Well initially I was thinking of using what I know from work - C# ",(0,s.mdx)("a",{href:"https://dotnet.microsoft.com/apps/aspnet/mvc",className:"blueLink"},"ASP.NET MVC"),". But I figured it would be better if I learnt something new and all that server side setup and maintenance seemed like a pain. After a recommendation from a friend I found that GitHub offers ",(0,s.mdx)("strong",{parentName:"p"},"free hosting")," for websites running ",(0,s.mdx)("a",{className:"blueLink",href:"https://pages.github.com/"},"GitHub Pages"),". This seemed perfect for what I needed and no server side hassle! From GitHub Pages I was directed to ",(0,s.mdx)("a",{href:"https://jekyllrb.com/",className:"blueLink"},"Jekyll"),". Jekyll is an amazing open source blogging tool, which among other things has inbuilt support for ",(0,s.mdx)("a",{href:"https://daringfireball.net/projects/markdown/",className:"blueLink"},"Markdown")," making writing blog posts a breeze",(0,s.mdx)("sup",{parentName:"p",id:"fnref-1"},(0,s.mdx)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),"."),(0,s.mdx)("p",null,"Here's an example of the JavaScript markdown which uses ",(0,s.mdx)("a",{href:"https://pypi.org/project/Pygments/",className:"blueLink"},"Pygments"),":"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'(function() {\n  console.log("Hello World! üòä");\n})();\n')),(0,s.mdx)("p",null,"Jekyll also has a great HTML templating through use of ",(0,s.mdx)("a",{href:"https://jekyllrb.com/docs/includes/",className:"blueLink"},"includes")," and ",(0,s.mdx)("a",{href:"https://jekyllrb.com/docs/step-by-step/04-layouts/",className:"blueLink"},"layouts")," which help keep your project well structured."),(0,s.mdx)("h2",null,"Sass and Gulp"),(0,s.mdx)("p",null,"At work we predominantly use CSS libraries like ",(0,s.mdx)("a",{href:"https://getbootstrap.com/",className:"blueLink"},"Bootstrap"),", but one thing I decided fairly early on was that I was going to develop all the CSS myself to improve my front-end skills. After a bit of online research I decided I was going to use the ",(0,s.mdx)("a",{href:"https://sass-lang.com/",className:"blueLink"},"Sass")," CSS templating language. Here's the Sass for those crazy blue links:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-scss"},"$color--skyblue: #00c1c1;\n$color--white: #fff;\n\n%transition-duration {\n  transition-duration: 0.5s;\n}\n\n.blueLink,\n%blueLink {\n  color: $color--skyblue;\n  text-decoration: none;\n  background-image: linear-gradient(\n    to top,\n    $color--skyblue,\n    $color--skyblue 50%,\n    transparent 50%,\n    transparent\n  );\n  background-position: 0% 0%;\n  background-size: 100% 200%;\n  @extend %transition-duration;\n\n  &:hover {\n    color: $color--white;\n    background-position: 0 100%;\n  }\n}\n")),(0,s.mdx)("p",null,"Sass makes your CSS code simpler with things like variables ",(0,s.mdx)("inlineCode",{parentName:"p"},"$color--skyblue"),", placeholder selectors ",(0,s.mdx)("inlineCode",{parentName:"p"},"%transition-duration")," and parent selectors ",(0,s.mdx)("inlineCode",{parentName:"p"},"&:hover"),". Essentially Sass means you don't have to repeat yourself so often!"),(0,s.mdx)("p",null,"While investigating Sass I was directed to ",(0,s.mdx)("a",{href:"https://gulpjs.com/",className:"blueLink"},"Gulp")," a DevOps build tool. Gulp essentially allows you to automate command line tools for things like:"),(0,s.mdx)("ul",null,(0,s.mdx)("li",{parentName:"ul"},"Compiling Sass files to CSS when they change."),(0,s.mdx)("li",{parentName:"ul"},"Minifying JavaScript and CSS files."),(0,s.mdx)("li",{parentName:"ul"},"Running a Jekyll build when a markdown file is updated."),(0,s.mdx)("li",{parentName:"ul"},"Reloading your browser once a build is complete.")),(0,s.mdx)("p",null,"This makes development a lot easier and faster. Here's an example of a gulp command that compiles a Sass file and minifies the outputed CSS:"),(0,s.mdx)("pre",null,(0,s.mdx)("code",{parentName:"pre",className:"language-javascript"},'/**\n * Compile .scss files.\n */\ngulp.task("sass", function() {\n  return gulp\n    .src("_scss/main.scss")\n    .pipe(sass().on("error", sass.logError))\n    .pipe(cssnano())\n    .pipe(rename("main.min.css"))\n    .pipe(gulp.dest("assets/css/"));\n});\n')),(0,s.mdx)("h2",null,"Photos"),(0,s.mdx)("div",{className:l.halfWidthContainer},(0,s.mdx)("div",{className:l.halfWidthLeft},(0,s.mdx)("img",{style:{width:"100%"},src:o.Z,alt:"sunset"})),(0,s.mdx)("div",{className:l.halfWidthRight},(0,s.mdx)("p",null,"One thing I thought I'd share on this blog is some ",(0,s.mdx)("a",{className:"blueLink",href:"/Photos"},"photos")," I've taken on my travels. In the future I'd like to develop that area into a gallery of some kind. The photos have been compressed using ",(0,s.mdx)("a",{className:"blueLink",href:"https://squoosh.app/"},"Squoosh")," making them take up less space and load quickly (hopefully)."))),(0,s.mdx)("h2",null,"Conclusion"),(0,s.mdx)("p",null,'In fact creating this website was a lot easier than I imagined thanks to all the great freely available open source tools on the web. Now that I started writing about some of these tools I realised most of them probably need an entire post to be explained with any detail. So I might be doing some "idiots guide to..." posts in the near future. Anyhow hope you enjoyed my first post and are looking forward to the next instalment. üòè'),(0,s.mdx)("div",{className:"footnotes"},(0,s.mdx)("hr",{parentName:"div"}),(0,s.mdx)("ol",{parentName:"div"},(0,s.mdx)("li",{parentName:"ol",id:"fn-1"},"That's the plan anyway!",(0,s.mdx)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"‚Ü©")))))}m.isMDXComponent=!0},3366:function(e,n,a){function t(e,n){if(null==e)return{};var a,t,s={},o=Object.keys(e);for(t=0;t<o.length;t++)a=o[t],n.indexOf(a)>=0||(s[a]=e[a]);return s}a.d(n,{Z:function(){return t}})}}]);
//# sourceMappingURL=component---src-pages-posts-2019-02-09-hello-world-index-mdx-cf2df8681f4fc8b1b9c4.js.map