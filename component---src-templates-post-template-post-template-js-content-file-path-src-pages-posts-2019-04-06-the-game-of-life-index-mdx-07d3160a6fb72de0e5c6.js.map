{"version":3,"file":"component---src-templates-post-template-post-template-js-content-file-path-src-pages-posts-2019-04-06-the-game-of-life-index-mdx-07d3160a6fb72de0e5c6.js","mappings":"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","sources":["webpack://blog/./src/components/posts/golTool/style.module.css","webpack://blog/./src/components/posts/golTool/golTool.js","webpack://blog/./src/pages/posts/2019-04-06-the-game-of-life/index.mdx","webpack://blog/./src/templates/postTemplate/postTemplate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport var container = \"style-module--container--b0d11\";\nexport var control = \"style-module--control--14a5d\";\nexport var controls = \"style-module--controls--8241a\";","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlay, faPause } from \"@fortawesome/free-solid-svg-icons\";\r\nimport * as style from \"./style.module.css\";\r\n\r\nexport default class GOLTool extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.ALIVE = 1;\r\n    this.DEAD = 0;\r\n    this.N = 200;\r\n    this.cellSize = 3;\r\n    this.neighbourhood = [\r\n      [1, 0],\r\n      [1, 1],\r\n      [0, 1],\r\n      [-1, 1],\r\n      [-1, 0],\r\n      [-1, -1],\r\n      [0, -1],\r\n      [1, -1],\r\n    ];\r\n    this.arr = this.create2Darray(this.N, this.N, this.DEAD);\r\n    this.canvas = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    const canvas = this.canvas.current;\r\n    canvas.width = this.arr.length * this.cellSize;\r\n    canvas.height = this.arr[0].length * this.cellSize;\r\n    this.initialiseAcorn(this.arr);\r\n    this.printToCanvas(this.arr, this.cellSize, canvas);\r\n  }\r\n\r\n  state = {\r\n    color1: \"#00ff00\",\r\n    color2: \"#000000\",\r\n    running: false,\r\n  };\r\n\r\n  color1ChangeHandler = e => {\r\n    this.setState({ color1: e.target.value });\r\n  };\r\n\r\n  color2ChangeHandler = e => {\r\n    this.setState({ color2: e.target.value });\r\n  };\r\n\r\n  startClickHandler = () => {\r\n    if (!this.state.running) {\r\n      this.setState({ running: true });\r\n      this.requestId = requestAnimationFrame(this.gameLoop);\r\n    } else {\r\n      cancelAnimationFrame(this.requestId);\r\n      this.requestId = undefined;\r\n      this.setState({ running: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={style.container}>\r\n        <canvas ref={this.canvas} />\r\n        <div className={style.controls}>\r\n          <input\r\n            className={style.control}\r\n            type=\"color\"\r\n            value={this.state.color1}\r\n            onChange={this.color1ChangeHandler}\r\n          />\r\n          <input\r\n            className={style.control}\r\n            type=\"color\"\r\n            value={this.state.color2}\r\n            onChange={this.color2ChangeHandler}\r\n          />\r\n          <button className={style.control} onClick={this.startClickHandler}>\r\n            {this.state.running ? (\r\n              <FontAwesomeIcon icon={faPause} />\r\n            ) : (\r\n              <FontAwesomeIcon icon={faPlay} />\r\n            )}\r\n          </button>\r\n          <button className={style.control} onClick={this.crossClickHandler}>\r\n            Cross\r\n          </button>\r\n          <button className={style.control} onClick={this.acornClickHandler}>\r\n            Acorn\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  gameLoop = () => {\r\n    if (this.canvas.current !== null)\r\n    {\r\n      this.arr = this.iterate(this.arr);\r\n      this.printToCanvas(this.arr, this.cellSize, this.canvas.current);\r\n      this.requestId = requestAnimationFrame(this.gameLoop);\r\n    }\r\n  };\r\n\r\n  iterate(oldArray) {\r\n    const newArray = this.clone2Darray(oldArray);\r\n    for (let x = 0; x < oldArray.length; x++) {\r\n      for (let y = 0; y < oldArray[0].length; y++) {\r\n        const aliveNeighbourCount = this.getneighcount(oldArray, x, y);\r\n        if (oldArray[x][y] === this.ALIVE) {\r\n          if (aliveNeighbourCount < 2) {\r\n            newArray[x][y] = this.DEAD; // Underpopulation kills cell.\r\n          } else if (aliveNeighbourCount === 2 || aliveNeighbourCount === 3) {\r\n            newArray[x][y] = this.ALIVE; // Surivies!\r\n          } else if (aliveNeighbourCount > 3) {\r\n            newArray[x][y] = this.DEAD; // Overpopulation kills cell.\r\n          }\r\n        } else if (oldArray[x][y] === this.DEAD && aliveNeighbourCount === 3) {\r\n          newArray[x][y] = this.ALIVE; // Reproduction.\r\n        }\r\n      }\r\n    }\r\n    return newArray;\r\n  }\r\n\r\n  // Get number of ALIVE neighbours for point (x,y)\r\n  getneighcount(arr, x, y) {\r\n    let nc = 0;\r\n    for (let nn = 0; nn < this.neighbourhood.length; nn++) {\r\n      const dx = this.neighbourhood[nn][0];\r\n      const dy = this.neighbourhood[nn][1];\r\n      if (\r\n        arr[this.pbcz(x + dx, arr.length)][this.pbcz(y + dy, arr[x].length)] ===\r\n        this.ALIVE\r\n      ) {\r\n        nc++;\r\n      }\r\n    }\r\n    return nc;\r\n  }\r\n\r\n  // Periodic boundary conditions in z-direction:\r\n  pbcz(iz, Lz) {\r\n    if (iz >= Lz) {\r\n      iz = iz - Lz;\r\n    }\r\n    if (iz < 0) {\r\n      iz = iz + Lz;\r\n    }\r\n    return iz;\r\n  }\r\n\r\n  // Scales and prints the input array to canvas.\r\n  printToCanvas(arr, cellSize, canvas) {\r\n    const ctx = canvas.getContext(\"2d\");\r\n    const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n    const data = imageData.data;\r\n    const rgb1 = this.hexToRgb(this.state.color1);\r\n    const rgb2 = this.hexToRgb(this.state.color2);\r\n\r\n    for (let x = 0; x < arr.length; x++) {\r\n      for (let y = 0; y < arr[0].length; y++) {\r\n        const isAlive = arr[x][y] === this.ALIVE;\r\n        for (let i = 0; i < cellSize; i++) {\r\n          for (let j = 0; j < cellSize; j++) {\r\n            const row = x * cellSize + i;\r\n            const col = y * cellSize + j;\r\n            const index = (row + col * arr.length * cellSize) * 4;\r\n            data[index + 0] = isAlive ? rgb1.r : rgb2.r;\r\n            data[index + 1] = isAlive ? rgb1.g : rgb2.g;\r\n            data[index + 2] = isAlive ? rgb1.b : rgb2.b;\r\n            data[index + 3] = 255;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    ctx.putImageData(imageData, 0, 0);\r\n  }\r\n\r\n  // Converts a hex color string to rgb.\r\n  hexToRgb(hex) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? {\r\n          r: parseInt(result[1], 16),\r\n          g: parseInt(result[2], 16),\r\n          b: parseInt(result[3], 16),\r\n        }\r\n      : null;\r\n  }\r\n\r\n  acornClickHandler = () => {\r\n    this.arr = this.create2Darray(this.N, this.N, this.DEAD);\r\n    this.initialiseAcorn(this.arr);\r\n    this.printToCanvas(this.arr, this.cellSize, this.canvas.current);\r\n  };\r\n\r\n  initialiseAcorn(arr) {\r\n    const cx = Math.round(arr.length / 2);\r\n    const cy = Math.round(arr[0].length / 2);\r\n    const acorn = [\r\n      [0, 0],\r\n      [-3, -1],\r\n      [-2, -1],\r\n      [-2, 1],\r\n      [1, -1],\r\n      [2, -1],\r\n      [3, -1],\r\n    ];\r\n    for (let i = 0; i < acorn.length; i++) {\r\n      const dx = acorn[i][0];\r\n      const dy = acorn[i][1];\r\n      arr[cx + dx][cy + dy] = this.ALIVE;\r\n    }\r\n  }\r\n\r\n  crossClickHandler = () => {\r\n    this.arr = this.create2Darray(this.N, this.N, this.DEAD);\r\n    this.initialiseCross(this.arr);\r\n    this.printToCanvas(this.arr, this.cellSize, this.canvas.current);\r\n  };\r\n\r\n  initialiseCross(arr) {\r\n    const Lx = arr.length;\r\n    const Ly = arr[0].length;\r\n    for (let x = 0; x < Lx; x++) {\r\n      const y = x;\r\n      if (y >= 0 && y < Ly) {\r\n        arr[x][y] = this.ALIVE;\r\n      }\r\n    }\r\n    for (let x = Lx - 1; x >= 0; x--) {\r\n      const y = Ly - (x + 1);\r\n      if (y >= 0 && y < Ly) {\r\n        arr[x][y] = this.ALIVE;\r\n      }\r\n    }\r\n  }\r\n\r\n  clone2Darray(oldArray) {\r\n    const newArray = oldArray.map(i => {\r\n      return i.slice(0);\r\n    });\r\n    return newArray;\r\n  }\r\n\r\n  // Creates a 2D array, initialised to value\r\n  create2Darray(w, h, value) {\r\n    const arr = [];\r\n    for (let x = 0; x < w; x++) {\r\n      arr[x] = [];\r\n    }\r\n    for (let x = 0; x < w; x++) {\r\n      for (let y = 0; y < h; y++) {\r\n        arr[x][y] = value;\r\n      }\r\n    }\r\n    return arr;\r\n  }\r\n}\r\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nimport GOLTool from \"../../../components/posts/golTool/golTool\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.p, null, \"The \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\"\n  }, \"Game of Life\"), \" is a \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Cellular_automaton\"\n  }, \"cellular automataton\"), \" designed by the British mathematician \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/John_Horton_Conway\"\n  }, \"John Conway\"), \". A cellular automataton is a mathematical model that consists of a grid of cells, with each cell having an finite number of states (e.g \\\"on\\\" or \\\"off\\\"). A new grid configuration (a new \", React.createElement(_components.em, null, \"generation\"), \") is created according to a fixed set of rules that determine the state of each cell based on its current state and the state of the cells around it (its \", React.createElement(_components.em, null, \"neighbourhood\"), \"). Cellular automata can be used to simulate a variety of real-world systems, from the \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://en.wikipedia.org/wiki/Belousov%E2%80%93Zhabotinsky_reaction\"\n  }, \"Belousov–Zhabotinsky reaction\"), \" to \", React.createElement(\"a\", {\n    class: \"blueLink\",\n    href: \"https://blogs.msdn.microsoft.com/calvin_hsia/2014/09/30/fish-vs-sharks-predator-prey-simulation/\"\n  }, \"predator prey relationships\"), \".\"), \"\\n\", React.createElement(_components.p, null, \"In Conway's Game of Life, the grid is a 2D array of square cells each with two states \", React.createElement(_components.em, null, \"alive\"), \" and \", React.createElement(_components.em, null, \"dead\"), \". Each cell interacts with its 8 neighbours, which are the cells that are horizontally, vertically, or diagonally adjacent to it. The rules are:\"), \"\\n\", React.createElement(_components.ul, null, \"\\n\", React.createElement(_components.li, null, \"Any live cell with fewer than two live neighbours dies, as if by underpopulation.\"), \"\\n\", React.createElement(_components.li, null, \"Any live cell with two or three live neighbours lives on to the next generation.\"), \"\\n\", React.createElement(_components.li, null, \"Any live cell with more than three live neighbours dies, as if by overpopulation.\"), \"\\n\", React.createElement(_components.li, null, \"Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.\"), \"\\n\"), \"\\n\", React.createElement(_components.p, null, \"We can get the number of alive neighbours of a cell in 2D array with the code below. Note we are applying \", React.createElement(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/Periodic_boundary_conditions\",\n    class: \"blueLink\"\n  }, \"periodic boundary conditions\"), \" in both the x and y directions.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"var ALIVE = 1;\\r\\nvar DEAD = 0;\\r\\nvar N = 200;\\r\\nvar arr = create2Darray(N, N, DEAD); // Iitialises a new 2D array with array values set to 0.\\r\\nvar neighbourhood = [\\r\\n  [1, 0],\\r\\n  [1, 1],\\r\\n  [0, 1],\\r\\n  [-1, 1],\\r\\n  [-1, 0],\\r\\n  [-1, -1],\\r\\n  [0, -1],\\r\\n  [1, -1],\\r\\n];\\r\\n\\r\\n// Get number of ALIVE neighbours for point (x,y)\\r\\nfunction getneighcount(arr, x, y) {\\r\\n  var nc = 0;\\r\\n  for (var nn = 0; nn < neighbourhood.length; nn++) {\\r\\n    var dx = neighbourhood[nn][0];\\r\\n    var dy = neighbourhood[nn][1];\\r\\n    if (arr[pbcz(x + dx, arr.length)][pbcz(y + dy, arr[x].length)] === ALIVE) {\\r\\n      nc++;\\r\\n    }\\r\\n  }\\r\\n  return nc;\\r\\n}\\r\\n\\r\\n// Periodic boundary conditions in z-direction:\\r\\nfunction pbcz(iz, Lz) {\\r\\n  if (iz >= Lz) {\\r\\n    iz = iz - Lz;\\r\\n  }\\r\\n  if (iz < 0) {\\r\\n    iz = iz + Lz;\\r\\n  }\\r\\n  return iz;\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"Then we can just turn the Game of Life rules into some simple JavaScript code:\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-javascript\"\n  }, \"var ALIVE = 1;\\r\\nvar DEAD = 0;\\r\\nvar N = 200;\\r\\nvar arr = create2Darray(N, N, DEAD); // Iitialises a new 2D array with array values set to 0.\\r\\nvar requestId;\\r\\ngameLoop();\\r\\n\\r\\n// Runs forever, call cancelAnimationFrame(requestId) to stop.\\r\\nfunction gameLoop() {\\r\\n  arr = iterate(arr);\\r\\n  print_to_canvas(arr);\\r\\n  requestId = requestAnimationFrame(gameLoop);\\r\\n}\\r\\n\\r\\n// Iterate the next state of the array.\\r\\nfunction iterate(oldArray) {\\r\\n  var newArray = clone2Darray(oldArray);\\r\\n  for (var x = 0; x < oldArray.length; x++) {\\r\\n    for (var y = 0; y < oldArray[0].length; y++) {\\r\\n      var aliveNeighbourCount = getneighcount(oldArray, x, y);\\r\\n      if (oldArray[x][y] === ALIVE) {\\r\\n        if (aliveNeighbourCount < 2) {\\r\\n          newArray[x][y] = DEAD; // Underpopulation kills cell.\\r\\n        } else if (aliveNeighbourCount === 2 || aliveNeighbourCount === 3) {\\r\\n          newArray[x][y] = ALIVE; // Surivies!\\r\\n        } else if (aliveNeighbourCount > 3) {\\r\\n          newArray[x][y] = DEAD; // Overpopulation kills cell.\\r\\n        }\\r\\n      } else if (oldArray[x][y] === DEAD && aliveNeighbourCount === 3) {\\r\\n        newArray[x][y] = ALIVE; // Reproduction.\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n  return newArray;\\r\\n}\\n\")), \"\\n\", React.createElement(_components.p, null, \"I've packaged the Game of Life code up into interactive tool below.\"), \"\\n\", React.createElement(GOLTool), \"\\n\", React.createElement(_components.p, null, \"The full code for this tool is available on my \", React.createElement(\"a\", {\n    href: \"https://github.com/george-pearson\",\n    class: \"blueLink\"\n  }, \"GitHub\"), \".\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"C:/src/gatsby/src/pages/posts/2019-04-06-the-game-of-life/index.mdx\";\nimport React from \"react\";\nimport Layout from \"../../components/layout/layout\";\nimport PostHeader from \"../../components/postHeader/postHeader\";\nimport CodeBlock from \"../../components/codeBlock/codeBlock\";\nimport InlineCode from \"../../components/inlineCode/inlineCode\";\nimport {graphql} from \"gatsby\";\nimport {MDXProvider} from \"@mdx-js/react\";\nimport * as style from \"./style.module.css\";\nconst PostTemplate = ({data: {mdx}, children}) => {\n  const components = {\n    code: CodeBlock,\n    inlineCode: InlineCode\n  };\n  const post = mdx;\n  return React.createElement(Layout, {\n    page: \"Post\",\n    post: post\n  }, React.createElement(\"div\", {\n    className: style.postContainer\n  }, React.createElement(\"div\", {\n    className: style.post\n  }, React.createElement(PostHeader, {\n    post: post\n  }), React.createElement(MDXProvider, {\n    components: components\n  }, children))));\n};\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    mdx(fields: { slug: { eq: $slug } }) {\n      id\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        date(formatString: \"MMMM DD, YYYY\")\n        subtitle\n        image\n      }\n    }\n  }\n`;\nPostTemplate\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(PostTemplate, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["control","GOLTool","_React$Component","props","_this","call","state","color1","color2","running","color1ChangeHandler","e","setState","target","value","color2ChangeHandler","startClickHandler","cancelAnimationFrame","requestId","undefined","requestAnimationFrame","gameLoop","canvas","current","arr","iterate","printToCanvas","cellSize","acornClickHandler","create2Darray","N","DEAD","initialiseAcorn","crossClickHandler","initialiseCross","ALIVE","neighbourhood","React","_inheritsLoose","_proto","prototype","componentDidMount","this","width","length","height","render","className","ref","style","type","onChange","onClick","FontAwesomeIcon","icon","faPause","faPlay","oldArray","newArray","clone2Darray","x","y","aliveNeighbourCount","getneighcount","nc","nn","dx","dy","pbcz","iz","Lz","ctx","getContext","imageData","getImageData","data","rgb1","hexToRgb","rgb2","isAlive","i","j","index","r","g","b","putImageData","hex","result","exec","parseInt","cx","Math","round","cy","acorn","Lx","Ly","map","slice","w","h","_createMdxContent","_components","Object","assign","p","em","ul","li","pre","code","_provideComponents","components","class","href","wrapper","MDXLayout","PostTemplate","_ref","mdx","children","CodeBlock","inlineCode","InlineCode","post","Layout","page","PostHeader","MDXProvider","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}