{"version":3,"sources":["webpack:///./src/pages/posts/2019-02-20-diamond-square-algorithm-cloud-images/index.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","href","className","parentName","isMDXComponent"],"mappings":"kRAMO,IAAMA,EAAe,CAC1B,MAAS,wCACT,SAAY,gGACZ,KAAQ,aACR,MAAS,mBAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,cALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAE5E,8BAAW,mBAAGC,KAAK,yDAAyDC,UAAU,YAA3E,kCAAX,mDAA2L,mBAAGD,KAAK,0CAA0CC,UAAU,YAA5D,cAA3L,gIAAqZ,4BAAYC,WAAW,KAAvB,eAArZ,8GACA,yBAAK,oCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,goEAwEL,wHACA,wBACE,oBAAIA,WAAW,MAAf,qBAA0C,4BAAYA,WAAW,MAAvB,SAA1C,KACA,oBAAIA,WAAW,MAAf,yBAA8C,4BAAYA,WAAW,MAAvB,YAA9C,OAA2G,4BAAYA,WAAW,MAAvB,WAA3G,KACA,oBAAIA,WAAW,MAAf,oBAAyC,mBAAGF,KAAK,sDAAsDC,UAAU,YAAxE,UAAzC,YAAuJ,4BAAYC,WAAW,MAAvB,eAAvJ,KACA,oBAAIA,WAAW,MAAf,kCAAuD,mBAAGF,KAAK,iDAAiDC,UAAU,YAAnE,QAAvD,qCACA,oBAAIC,WAAW,MAAf,mEAEF,8FACA,cAAC,IAAD,CAASH,QAAQ,YACjB,oEAAiD,mBAAGC,KAAK,oCAAoCC,UAAU,YAAtD,UAAjD,8CAA+K,4BAAYC,WAAW,KAAvB,KAA/K,oCAAiQ,4BAAYA,WAAW,KAAvB,UAAjQ,mIAKJN,EAAWO,gBAAiB","file":"component---src-pages-posts-2019-02-20-diamond-square-algorithm-cloud-images-index-mdx-13c0437e6351f261854b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DSATool from \"../../../components/posts/dsaTool/dsaTool\";\nexport const _frontmatter = {\n  \"title\": \"Diamond-square Algorithm Cloud Images\",\n  \"subtitle\": \"I show off some JavaScript code to make cool cloud images using the Diamond-square algorithm.\",\n  \"date\": \"2019-02-20\",\n  \"image\": \"/cloudImage.jpg\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`The `}<a href=\"https://en.wikipedia.org/wiki/Diamond-square_algorithm\" className=\"blueLink\">{`Diamond-square algorithm (DSA)`}</a>{` is a popular method used to generate realistic `}<a href=\"https://en.wikipedia.org/wiki/Heightmap\" className=\"blueLink\">{`heightmaps`}</a>{` which resemble clouds, terrain and/or plasma. The JavaScript code below can be used to generate square cloud images of size `}<inlineCode parentName=\"p\">{`N = 2^(n+1)`}</inlineCode>{`. The images make great unique backgrounds (I have one on my phone!) and look rather pretty in my opinion.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`var n = 9;\nvar N = Math.pow(2, n) + 1;\nvar arr;\n\nfunction runDSA(N) {\n  // Initialise the array with random numbers at its corners\n  arr = create2Darray(N, N);\n  arr[0][0] = 2 * Math.random() - 1;\n  arr[0][N - 1] = 2 * Math.random() - 1;\n  arr[N - 1][0] = 2 * Math.random() - 1;\n  arr[N - 1][N - 1] = 2 * Math.random() - 1;\n\n  var side = N - 1;\n  var nSq = 1; // Number of Squares.\n  var f = 1.0; // f scales the random numbers at each stage of the algorithm\n  while (side > 1) {\n    var sideo2 = Math.round(side / 2);\n    var x0, x1, y0, y1, xc, yc, tot, ntot, dx, dy, xs, ys;\n    var diff = [[-1, 0], [1, 0], [0, -1], [0, 1]];\n    // Diamond step:\n    for (var ix = 0; ix < nSq; ix++) {\n      for (var iy = 0; iy < nSq; iy++) {\n        x0 = ix * side;\n        x1 = (ix + 1) * side;\n        y0 = iy * side;\n        y1 = (iy + 1) * side;\n        xc = x0 + sideo2;\n        yc = y0 + sideo2;\n        // Set this pixel to the mean of its \"diamond\" neighbours plus\n        // a random offset.\n        arr[xc][yc] =\n          (arr[y0][x0] + arr[y0][x1] + arr[y1][x0] + arr[y1][x1]) / 4;\n        arr[xc][yc] += f * (2 * Math.random() - 1);\n      }\n    }\n\n    //Square step:\n    for (var ix = 0; ix < 2 * nSq + 1; ix++) {\n      xc = sideo2 * ix;\n      for (var iy = 0; iy < 2 * nSq + 1; iy++) {\n        yc = side * iy + sideo2 * (1 - (ix % 2));\n        if (!(xc < N && xc > 0 && yc < N && yc > 0)) {\n          continue;\n        }\n        tot = 0.0;\n        ntot = 0;\n        // Set this pixel to the mean of its \"square\" neighbours plus\n        // a random offset. At the edges, it has only three neighbours.\n        for (var ii = 0; ii < diff.length; ii++) {\n          dx = diff[ii][0];\n          dy = diff[ii][1];\n          xs = xc + dx * sideo2;\n          ys = yc + dy * sideo2;\n          if (!(xs < N && xs > 0 && ys < N && ys > 0)) {\n            continue;\n          } else {\n            tot += arr[xs][ys];\n            ntot += 1;\n          }\n        }\n        arr[xc][yc] += tot / ntot + f * (2 * Math.random() - 1);\n      }\n    }\n    side = sideo2;\n    nSq = nSq * 2;\n    f = f / 2;\n  }\n  return arr;\n}\n`}</code></pre>\n    <p>{`I've packaged the DSA code up into a easy to use tool with colour selectors below. This code:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Runs the DSA, for `}<inlineCode parentName=\"li\">{`n = 9`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Scales the range from `}<inlineCode parentName=\"li\">{`[-1, +1]`}</inlineCode>{` to `}<inlineCode parentName=\"li\">{`[0, +1]`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Creates a hidden `}<a href=\"https://www.w3schools.com/graphics/canvas_intro.asp\" className=\"blueLink\">{`Canvas`}</a>{` of size `}<inlineCode parentName=\"li\">{`N = 2^(n+1)`}</inlineCode>{`.`}</li>\n      <li parentName=\"ol\">{`Adds pixels to the Canvas with `}<a href=\"https://en.wikipedia.org/wiki/RGBA_color_space\" className=\"blueLink\">{`RGBA`}</a>{` values scaled by the DSA output.`}</li>\n      <li parentName=\"ol\">{`Converts the canvas to an image and displays it on the screen.`}</li>\n    </ol>\n    <p>{`Just hit \"Reload\" below and you'll have your very own cloud image!`}</p>\n    <DSATool mdxType=\"DSATool\" />\n    <p>{`The full code for this is available on my `}<a href=\"https://github.com/george-pearson\" className=\"blueLink\">{`GitHub`}</a>{`. If you want a bigger image just increase `}<inlineCode parentName=\"p\">{`n`}</inlineCode>{`. Please bear in mind I've found `}<inlineCode parentName=\"p\">{`n > 11`}</inlineCode>{` tends to give my laptop a hard time and I haven't tested this on mobile so be careful (wouldn't want your browser to crash!).`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}